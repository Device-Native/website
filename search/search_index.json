{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Device Native Integration Overview","text":"<p>Welcome to the documentation for the Device Native SDK integration. Here you will find all of the various ways to integrate the Device Native SDK into your application. Device Native SDK is intended to be integrated with Android launcher apps that have system-level access.</p>"},{"location":"#integrate-the-sdk-required","title":"Integrate the SDK (required)","text":"<p>This is the general SDK integration guide that is required for all implementations of Device Native.</p> <ul> <li>General SDK Integration - shows how to integrate the Device Native SDK into your Android launcher</li> </ul>"},{"location":"#organic-ads-integrations","title":"Organic + Ads Integrations","text":"<p>These documents are for developers who intend to use both organic results and advertisements from Device Native.</p> <ul> <li>Organic &amp; Ad Recommendations - shows how to integrate organic results and ads into recommendation sections of your launcher, such as suggested or recently-used apps, or suggested deep links.</li> <li>Search for Organic &amp; Ads - shows how to integrate organic results and ads into search results of your launcher</li> </ul>"},{"location":"#ads-only-integrations","title":"Ads Only Integrations","text":"<p>These documents are for developers who only intend to use the advertisements from Device Native. No organic results are returned through this method.</p> <ul> <li>Ad Recommendations - shows how to integrate ads into recommendation sections of your launcher, such as suggested or recently-used apps.</li> <li>Search Ads - shows how to integrate ads into search results of your launcher.</li> <li>Hot App Suggestions - shows how to integrate hot app suggestions into your launcher.</li> </ul>"},{"location":"#need-help","title":"Need Help?","text":"<p>Please email help@devicenative.com for assistance or questions about the process.</p>"},{"location":"hot-app-suggestions/","title":"Hot App Suggestions Integration Steps","text":"<p>The instructions below will guide you on how to integrate the DNA SDK to power hot app recommendations in your launcher app. These are personalized suggestions to go download new apps.</p>"},{"location":"hot-app-suggestions/#1-retrieve-list-of-hot-apps","title":"1. Retrieve List of Hot Apps","text":"<p>To retrieve the list of hot apps for immediate display, use the following code. </p> <pre><code>DeviceNativeAds dna = DeviceNativeAds.getInstance(getApplicationContext());\nList&lt;DNAResultItem&gt; adUnits = dna.getHotAppsList(10);\n</code></pre> <p>Note:</p> <ul> <li>That you can adjust the number of top apps to be returned by passing a number to the getHotAppsList method.</li> <li>All of these results will be for apps that are not currently install (<code>isInstalled</code> will be false)</li> <li>This method return the results in milliseconds, so it's safe to run on the main thread. </li> <li>This will automatically fire an impression immediately if the impressionUrl is populated for each result. You MUST therefore show all of the result to the user.</li> <li>These are ordered by relevance, so the first result will be the most relevant.</li> </ul>"},{"location":"hot-app-suggestions/#key-fields-of-dnaresultitem-class","title":"Key Fields of DNAResultItem Class","text":"<ul> <li><code>id</code>: Unique identifier for the ad. Just a UUID for reference if you need</li> <li><code>packageName</code>: The package name of the advertiser's app</li> <li><code>isInstalled</code>: A convenient boolean indicating whether the advertiser's app is installed, derived from package manager</li> <li><code>appName</code>: The name of the advertiser's app</li> <li><code>title</code>: The ad creative title to be shown to the user</li> <li><code>description</code>: The ad creative description to be shown to the user. Can be null!</li> <li><code>iconUrl</code>: The ad creative icon URL to be shown to the user. Can be null!</li> <li><code>clickUrl</code>: The click URL of the ad unit. This will automatically be fired by the SDK when using the click and route method.</li> <li><code>impressionUrl</code>: The impression URL of the ad unit. This will automatically be fired by the SDK when requesting an ad for display.</li> <li><code>eCPM</code>: The expected revenue per thousand impressions for the ad unit. Note that this is not real when the <code>learningMode</code> is true</li> <li><code>learningMode</code>: A boolean indicating whether the ad unit is in eCPM learning mode, and whether the eCPM number can be used.</li> </ul>"},{"location":"hot-app-suggestions/#2-loading-the-advertisers-icon","title":"2. Loading The Advertiser's Icon","text":"<p>A reminder again that all of these hot apps results will be for apps that are not currently installed, so you'll need to load the icons asynchronously.</p>"},{"location":"hot-app-suggestions/#case-when-isinstalled-is-false-load-the-icon-from-the-iconurl","title":"Case when isInstalled is false - load the icon from the iconUrl","text":"<p>When the app is not installed, we have provided a convenient method to load the icon from the iconUrl. You can also retrieve the iconUrl from the ad unit object and handle this yourself if you prefer.</p>"},{"location":"hot-app-suggestions/#synchronously","title":"Synchronously","text":"<p>To be called on a background thread.</p> <pre><code>if (!adUnit.isInstalled) {\n    // load the icon from the iconUrl\n    Drawable icon = adUnit.loadCreativeDrawable();\n    // set the image on your UI\n    imageView.setImageDrawable(icon);\n}\n</code></pre>"},{"location":"hot-app-suggestions/#asynchrously","title":"Asynchrously","text":"<p>Can be called on the main thread.</p> <pre><code>if (!adUnit.isInstalled) {\n    // load the icon from the iconUrl\n    adUnit.loadCreativeDrawableAsync(new ImageCallback() {\n    @Override\n    public void onImageLoaded(Drawable icon) {\n        // Run on UI thread if updating UI components\n        runOnUiThread(new Runnable() {\n            @Override\n            public void run() {\n                // set the image on your UI\n                imageView.setImageDrawable(image);\n            }\n        });\n    }\n\n    @Override\n    public void onError(String error) {\n        // Log the error, show a default icon, etc\n    }\n});\n}\n</code></pre>"},{"location":"hot-app-suggestions/#3-handle-user-click-interaction","title":"3. Handle User Click Interaction","text":"<p>When a user clicks on the ad, use the following code to handle the routing and receive notifications of status.</p> <p>It executes on a separate thread to ensure the click handling URL properly tracks before the user is sent to the destination, and loading could take a second, so it's recommended to show a loading indicator until the callback is fired. Fine to pass null to the clickHandler callback if you don't need to.</p> <pre><code>DeviceNativeAds dna = DeviceNativeAds.getInstance(getApplicationContext());\ndna.fireClickAndRoute(adUnit, new DeviceNativeClickHandler() {\n    /**\n     * This method is called when the ad click routing process is completed, which means the user was\n     * sent to their destination, or it failed to route for soem reason.\n     * @param didRoute A boolean indicating whether the routing was successful.\n     */\n    public void onAdClickRouterCompleted(boolean didRoute) {\n        // stop showing a loading bar, or handle routing yourself if didRoute is false\n    }\n\n    /**\n     * This method is called when there is a failure in the ad click process. Implement this method to\n     * define what should happen when there is a failure in the ad click process.\n     * @param errorCode An integer representing the error code of the failure.\n     * @param errorMessage A string representing the error message of the failure.\n     */\n    public void onFailure(int errorCode, String errorMessage) {\n        // log the fail, stop showing loading bar, etc\n    }\n});\n</code></pre>"},{"location":"hot-app-suggestions/#need-help","title":"Need Help?","text":"<p>Please email help@devicenative.com for assistance or questions about the process.</p>"},{"location":"integrate-sdk/","title":"Basic SDK Integration Steps","text":"<p>These are the required steps to integrate the Device Native SDK into your Android launcher app. The SDK is intended to be integrated with Android launcher apps that have system-level access.</p>"},{"location":"integrate-sdk/#1-create-an-account-and-get-a-device-key","title":"1. Create an Account and Get a Device Key","text":"<p>First, create an account at DeviceNative. After registration, obtain your unique device key from the Settings Page, which you'll use in your application to initialize the SDK.</p>"},{"location":"integrate-sdk/#2-add-aar-dependency","title":"2. Add AAR Dependency","text":"<p>The DeviceNativeAds SDK is distributed as an AAR file. Follow the instructions below to install it.</p>"},{"location":"integrate-sdk/#21-download-the-aar-file","title":"2.1. Download the AAR File","text":"<p>You can find the latest AAR hosted here: https://dna-hosting.s3.amazonaws.com/public/com.devicenative.dna-v1.1.3.aar</p>"},{"location":"integrate-sdk/#22-place-the-aar-file-in-your-project","title":"2.2 Place the AAR File in your Project","text":"<p>Place the DeviceNativeAds SDK in the <code>libs</code> folder of your Android project. If you don't have a <code>libs</code> folder, create one. It should be placed in the same folder as your <code>src</code> folder like so:</p> <pre><code>project-folder/src/main/java/com/example/project/MainActivity.java\nproject-folder/libs/com.devicenative.dna-v1.1.3.aar\n</code></pre>"},{"location":"integrate-sdk/#23-add-the-aar-dependency","title":"2.3 Add the AAR Dependency","text":"<p>Add the following dependency to your app's <code>build.gradle</code> file:</p> <pre><code>dependencies {\n    implementation files('libs/com.devicenative.dna-v1.1.3.aar')\n}\n</code></pre> <p>or some Gradle versions:</p> <pre><code>dependencies {\n    implementation(files('libs/com.devicenative.dna-v1.1.3.aar'))\n}\n</code></pre>"},{"location":"integrate-sdk/#3-register-the-data-orchestrator-service-and-config-builder-service","title":"3. Register the Data Orchestrator Service and Config Builder Service","text":"<p>In your AndroidManifest.xml, register the DNADataOrchestrator service and the DNAConfigBuilder service. The DNADataOrchestrator is the main service which coordinates data fetching and processing to deliver fresh advertising results. It will run in your application's process and persist. The DNAConfigBuilder is a one-time use service which runs in a separate process to retrieve the user agent for the device. It will run for approximately 1 second at startup, and not again.</p> <pre><code>&lt;service android:name=\"com.devicenative.dna.DNADataOrchestrator\" /&gt;\n&lt;service\n    android:name=\"com.devicenative.dna.utils.DNAConfigBuilder\"\n    android:process=\":dna_config_builder\"\n    android:exported=\"false\"/&gt;\n</code></pre>"},{"location":"integrate-sdk/#4-add-required-permissions","title":"4. Add Required Permissions","text":"<p>Make sure to include the following permissions in your AndroidManifest.xml:</p> <pre><code>&lt;uses-permission android:name=\"android.permission.INTERNET\" /&gt;\n&lt;uses-permission android:name=\"android.permission.QUERY_ALL_PACKAGES\"/&gt;\n&lt;uses-permission android:name=\"android.permission.PACKAGE_USAGE_STATS\"/&gt;\n</code></pre>"},{"location":"integrate-sdk/#5-notification-listener-service-optional-but-recommended","title":"5. Notification Listener Service (Optional but Recommended)","text":"<p>If you want to collect notifications for ad creative, you must have a Notification Listener registered like the example below.</p> <p>No action needed here, but just remember the name of this class for later.</p> <pre><code>&lt;service android:name=\".notification.NotificationListener\"\n         android:enabled=\"true\"\n         android:exported=\"true\"\n         android:permission=\"android.permission.BIND_NOTIFICATION_LISTENER_SERVICE\"&gt;\n    &lt;intent-filter&gt;\n        &lt;action android:name=\"android.service.notification.NotificationListenerService\" /&gt;\n    &lt;/intent-filter&gt;\n&lt;/service&gt;\n</code></pre>"},{"location":"integrate-sdk/#6-initialize-the-sdk","title":"6. Initialize the SDK","text":"<p>Initialize the SDK in your Application class's <code>onCreate</code> method:</p> <pre><code>@Override\npublic void onCreate() {\n    super.onCreate();\n\n    DeviceNativeAds dna = DeviceNativeAds.getInstance(this);\n    dna.init(\"YOUR_DEVICE_KEY\");\n\n    // any other code you have\n}\n</code></pre> <p>Replace <code>YOUR_DEVICE_KEY</code> with the key obtained in step 1.</p>"},{"location":"integrate-sdk/#7-clean-up-resources","title":"7. Clean Up Resources","text":"<p>In the Application class's <code>onTerminate</code> method, clean up SDK resources:</p> <pre><code>@Override\npublic void onTerminate() {\n    super.onTerminate();\n\n    DeviceNativeAds dna = DeviceNativeAds.getInstance(this);\n    dna.destroy();\n\n    // any other code you have\n}\n</code></pre>"},{"location":"integrate-sdk/#8-process-notifications-optional-but-recommended","title":"8. Process Notifications (Optional but Recommended)","text":"<p>Device Native can use the recent notification for an app as its creative, creating personalized experiences that drive high conversions. It's strongly recommended that you add the notification listener.</p> <p>Open your notficiation listener class that you noticed in Step 5: <pre><code>// This is your class\npublic class NotificationListener extends NotificationListenerService {\n</code></pre></p> <p>Find the listener service method that handles new notifications, and call the appropriate Device Native code as shown below: <pre><code>@Override\npublic void onNotificationPosted(StatusBarNotification sbn) {\n\n    DeviceNativeAds dna = DeviceNativeAds.getInstance(getApplicationContext());\n    dna.onNotificationPosted(sbn);\n\n    // your other handling code\n}\n</code></pre></p>"},{"location":"integrate-sdk/#need-help","title":"Need Help?","text":"<p>Please email help@devicenative.com for assistance or questions about the process.</p>"},{"location":"rec-ads/","title":"Ad Recommendation Integration Steps","text":"<p>The instructions below will guide you on how to integrate the DNA SDK to power ads-only experiences in your launcher app.</p>"},{"location":"rec-ads/#1-retrieve-advertisements-for-recommendations","title":"1. Retrieve Advertisements for Recommendations","text":"<p>To retrieve an advertisement for immediate display, use the following code. </p> <pre><code>DeviceNativeAds dna = DeviceNativeAds.getInstance(getApplicationContext());\nList&lt;DNAResultItem&gt; adUnits = dna.getAdsForDisplay(1);\n</code></pre> <p>Note:</p> <ul> <li>That you can adjust the number of ads to be returned by passing a number to the getAdsForDisplay method.</li> <li>This method return an ad in milliseconds, so it's safe to run on the main thread. </li> <li>This will automatically fire an impression immediately if the impressionUrl is populated for each ad. You MUST therefore show all of the ads to the user.</li> <li>These are ordered by relevance, so the first ad will be the most relevant.</li> </ul>"},{"location":"rec-ads/#key-fields-of-dnaresultitem-class","title":"Key Fields of DNAResultItem Class","text":"<ul> <li><code>id</code>: Unique identifier for the ad. Just a UUID for reference if you need</li> <li><code>packageName</code>: The package name of the advertiser's app</li> <li><code>isInstalled</code>: A convenient boolean indicating whether the advertiser's app is installed, derived from package manager</li> <li><code>appName</code>: The name of the advertiser's app</li> <li><code>title</code>: The ad creative title to be shown to the user</li> <li><code>description</code>: The ad creative description to be shown to the user. Can be null!</li> <li><code>iconUrl</code>: The ad creative icon URL to be shown to the user. Can be null!</li> <li><code>clickUrl</code>: The click URL of the ad unit. This will automatically be fired by the SDK when using the click and route method.</li> <li><code>impressionUrl</code>: The impression URL of the ad unit. This will automatically be fired by the SDK when requesting an ad for display.</li> <li><code>eCPM</code>: The expected revenue per thousand impressions for the ad unit. Note that this is not real when the <code>learningMode</code> is true</li> <li><code>learningMode</code>: A boolean indicating whether the ad unit is in eCPM learning mode, and whether the eCPM number can be used.</li> </ul>"},{"location":"rec-ads/#2-loading-the-advertisers-icon","title":"2. Loading The Advertiser's Icon","text":""},{"location":"rec-ads/#case-when-isinstalled-is-true","title":"Case when isInstalled is true","text":"<p>When the app is installed, we recommend just retrieving the icon from the package manager for speed and simplicity.</p> <pre><code>if (adUnit.isInstalled) {\n    // load the icon from the package manager\n    Drawable icon = getPackageManager().getApplicationIcon(adUnit.packageName);\n}\n</code></pre>"},{"location":"rec-ads/#case-when-isinstalled-is-false-load-the-icon-from-the-iconurl","title":"Case when isInstalled is false - load the icon from the iconUrl","text":"<p>When the app is not installed, we have provided a convenient method to load the icon from the iconUrl. You can also retrieve the iconUrl from the ad unit object and handle this yourself if you prefer.</p>"},{"location":"rec-ads/#synchronously","title":"Synchronously","text":"<p>To be called on a background thread.</p> <pre><code>if (!adUnit.isInstalled) {\n    // load the icon from the iconUrl\n    Drawable icon = adUnit.loadCreativeDrawable();\n    // set the image on your UI\n    imageView.setImageDrawable(icon);\n}\n</code></pre>"},{"location":"rec-ads/#asynchrously","title":"Asynchrously","text":"<p>Can be called on the main thread.</p> <pre><code>if (!adUnit.isInstalled) {\n    // load the icon from the iconUrl\n    adUnit.loadCreativeDrawableAsync(new ImageCallback() {\n    @Override\n    public void onImageLoaded(Drawable icon) {\n        // Run on UI thread if updating UI components\n        runOnUiThread(new Runnable() {\n            @Override\n            public void run() {\n                // set the image on your UI\n                imageView.setImageDrawable(image);\n            }\n        });\n    }\n\n    @Override\n    public void onError(String error) {\n        // Log the error, show a default icon, etc\n    }\n});\n}\n</code></pre>"},{"location":"rec-ads/#3-handle-user-click-interaction","title":"3. Handle User Click Interaction","text":"<p>When a user clicks on the ad, use the following code to handle the routing and receive notifications of status.</p> <p>It executes on a separate thread to ensure the click handling URL properly tracks before the user is sent to the destination, and loading could take a second, so it's recommended to show a loading indicator until the callback is fired. Fine to pass null to the clickHandler callback if you don't need to.</p> <pre><code>DeviceNativeAds dna = DeviceNativeAds.getInstance(getApplicationContext());\ndna.fireClickAndRoute(adUnit, new DeviceNativeClickHandler() {\n    /**\n     * This method is called when the ad click routing process is completed, which means the user was\n     * sent to their destination, or it failed to route for soem reason.\n     * @param didRoute A boolean indicating whether the routing was successful.\n     */\n    public void onAdClickRouterCompleted(boolean didRoute) {\n        // stop showing a loading bar, or handle routing yourself if didRoute is false\n    }\n\n    /**\n     * This method is called when there is a failure in the ad click process. Implement this method to\n     * define what should happen when there is a failure in the ad click process.\n     * @param errorCode An integer representing the error code of the failure.\n     * @param errorMessage A string representing the error message of the failure.\n     */\n    public void onFailure(int errorCode, String errorMessage) {\n        // log the fail, stop showing loading bar, etc\n    }\n});\n</code></pre>"},{"location":"rec-ads/#need-help","title":"Need Help?","text":"<p>Please email help@devicenative.com for assistance or questions about the process.</p>"},{"location":"rec-organic/","title":"Recommendation Integration Steps","text":"<p>The instructions below will guide you on how to integrate the DNA SDK to power ads-only experiences in your launcher app.</p>"},{"location":"rec-organic/#1-retrieve-results-for-app-suggestions","title":"1. Retrieve Results for App Suggestions","text":"<p>To retrieve suggested apps for immediate display, use the following code. </p> <pre><code>DeviceNativeAds dna = DeviceNativeAds.getInstance(getApplicationContext());\nList&lt;DNAResultItem&gt; appResults = dna.getOrganicAppSuggestions(5);\n</code></pre> <p>Note:</p> <ul> <li>That you can adjust the number of results to be returned by passing a number to the getOrganicAppSuggestions method. The example shows 5.</li> <li>This method return an results in milliseconds, so it's safe to run on the main thread. </li> <li>Ads will be mixed into the app results</li> <li>This will automatically fire an impression immediately if the impressionUrl is populated for each ad. You MUST therefore show all of the ads to the user.</li> <li>These are ordered by relevance, so the first ad will be the most relevant.</li> </ul>"},{"location":"rec-organic/#key-fields-of-dnaresultitem-class","title":"Key Fields of DNAResultItem Class","text":"<ul> <li><code>id</code>: Unique identifier for the ad. Just a UUID for reference if you need</li> <li><code>resultType</code> : The type of result. Will be <code>DNAResultItem.TYPE_AD</code> for ads.<ul> <li><code>DNAResultItem.TYPE_APP</code>: For organic app results,</li> <li><code>DNAResultItem.TYPE_AD</code>: For advertisements</li> <li><code>DNAResultItem.TYPE_SHORTCUT</code>: For shortcuts and deep links (only returned for getOrganicLinkSuggestions)</li> <li><code>DNAResultItem.TYPE_NOTIFICATION</code>: For notificiations (only returned for getOrganicLinkSuggestions)</li> </ul> </li> <li><code>packageName</code>: The package name of the advertiser's app</li> <li><code>isInstalled</code>: A convenient boolean indicating whether the advertiser's app is installed, derived from package manager</li> <li><code>appName</code>: The name of the advertiser's app</li> <li><code>title</code>: The ad creative title to be shown to the user</li> <li><code>description</code>: The ad creative description to be shown to the user. Can be null!</li> <li><code>iconUrl</code>: The ad creative icon URL to be shown to the user. Can be null!</li> <li><code>clickUrl</code>: The click URL of the ad unit. This will automatically be fired by the SDK when using the click and route method.</li> <li><code>impressionUrl</code>: The impression URL of the ad unit. This will automatically be fired by the SDK when requesting an ad for display.</li> <li><code>eCPM</code>: The expected revenue per thousand impressions for the ad unit. Note that this is not real when the <code>learningMode</code> is true</li> <li><code>learningMode</code>: A boolean indicating whether the ad unit is in eCPM learning mode, and whether the eCPM number can be used.</li> </ul>"},{"location":"rec-organic/#example-implementation","title":"Example Implementation","text":"<p>Here's an example iteration through the app results to show an example implementation:</p> <pre><code>List&lt;DNAResultItem&gt; results = DeviceNativeAds.getInstance(this).getOrganicAppSuggestions(5);\nfor (DNAResultItem result : results) {\n    View itemView = getLayoutInflater().inflate(R.layout.app_view, section, false);\n\n    ImageView itemIcon = itemView.findViewById(R.id.item_icon);\n    TextView itemTitle = itemView.findViewById(R.id.item_title);\n\n    if (result.resultType.equals(DNAResultItem.TYPE_AD)) {\n        // load the icon from the iconUrl\n        Drawable icon = result.loadCreativeDrawable();\n        itemIcon.setImageDrawable(icon);\n    } else if (result.resultType.equals(DNAResultItem.TYPE_APP) &amp;&amp; result.isInstalled) {\n        // load the icon from the package manager\n        Drawable icon = getPackageManager().getApplicationIcon(result.packageName);\n        itemIcon.setImageDrawable(icon);\n    }\n\n    itemTitle.setText(result.title);\n\n    itemView.setOnClickListener(view -&gt; {\n        // Show some loading bar while the click is being processed\n        DeviceNativeAds.getInstance(this).fireClickAndRoute(result, new DeviceNativeClickHandler() {\n            @Override\n            public void onAdClickRouterCompleted(boolean didRoute) {\n                // stop showing a loading bar, or handle routing yourself if didRoute is false\n            }\n\n            @Override\n            public void onFailure(int errorCode, String errorMessage) {\n                // Log the error\n            }\n        });\n    });\n\n    recommendationSection.addView(itemView);\n}\n</code></pre>"},{"location":"rec-organic/#2-retrieve-results-for-suggested-app-links","title":"2. Retrieve Results for Suggested App Links","text":"<p>To retrieve suggested deep links and notifications for immediate display, use the following code. </p> <pre><code>DeviceNativeAds dna = DeviceNativeAds.getInstance(getApplicationContext());\nList&lt;DNAResultItem&gt; linkResults = dna.getOrganicLinkSuggestions(3);\n</code></pre> <p>Note:</p> <ul> <li>That you can adjust the number of results to be returned by passing a number to the getOrganicLinkSuggestions method. The example shows 3.</li> <li>This method return an results in milliseconds, so it's safe to run on the main thread. </li> <li>Ads will be mixed into the link results</li> <li>This will automatically fire an impression immediately if the impressionUrl is populated for each ad. You MUST therefore show all of the ads to the user.</li> <li>These are ordered by relevance, so the first result will be the most relevant.</li> </ul>"},{"location":"rec-organic/#example-implementation_1","title":"Example Implementation","text":"<p>Here's an example iteration through the deep link results to show an example implementation:</p> <pre><code>List&lt;DNAResultItem&gt; results = DeviceNativeAds.getInstance(this).getOrganicLinkSuggestions(3);\nfor (DNAResultItem resultItem : results) {\n    View itemView = getLayoutInflater().inflate(R.layout.result_view, section, false);\n\n    ImageView itemIcon = itemView.findViewById(R.id.item_icon);\n    TextView itemTitle = itemView.findViewById(R.id.item_title);\n    TextView itemDescription = itemView.findViewById(R.id.item_description);\n\n    if (resultItem.resultType.equals(DNAResultItem.TYPE_AD) || resultItem.resultType.equals(DNAResultItem.TYPE_SHORTCUT)) {\n        resultItem.loadCreativeDrawableAsync(this, new DNAResultItem.ImageCallback() {\n            @Override\n            public void onImageLoaded(Drawable icon) {\n                new Thread(() -&gt; {\n                    runOnUiThread(() -&gt; {\n                        if (icon == null) {\n                            try {\n                                Drawable backupIcon = getPackageManager().getApplicationIcon(resultItem.packageName);\n                                itemIcon.setImageDrawable(backupIcon);\n                            } catch (Exception e) {\n                                Log.e(\"YourActivity\", \"Error loading app icon: \" + e.getMessage());\n                            }\n                        } else {\n                            itemIcon.setImageDrawable(icon);\n                        }\n                    });\n                }).start();\n            }\n\n            @Override\n            public void onError(String message) {\n                try {\n                    Drawable icon = getPackageManager().getApplicationIcon(resultItem.packageName);\n                    itemIcon.setImageDrawable(icon);\n                } catch (Exception e) {\n                    Log.e(\"YourActivity\", \"Error loading app icon: \" + e.getMessage());\n                }\n            }\n        });\n    } else {\n        try {\n            Drawable icon = getPackageManager().getApplicationIcon(resultItem.packageName);\n            itemIcon.setImageDrawable(icon);\n        } catch (Exception e) {\n            Log.e(\"YourActivity\", \"Error loading app icon: \" + e.getMessage());\n        }\n    }\n\n    itemTitle.setText(resultItem.title);\n    String description = resultItem.description;\n    if (resultItem.resultType.equals(DNAResultItem.TYPE_AD)) {\n        if (description != null &amp;&amp; !description.isEmpty()) {\n            description = description.concat(\" - Ad\");\n        } else {\n            description = \"Promoted\";\n        }\n    }\n    if (description == null || description.isEmpty()) {\n        itemDescription.setVisibility(View.GONE);\n    } else {\n        itemDescription.setText(description);\n    }\n\n    itemView.setOnClickListener(view -&gt; {\n        // Show some loading bar while the click is being processed\n        DeviceNativeAds.getInstance(this).fireClickAndRoute(resultItem, new DeviceNativeClickHandler() {\n            @Override\n            public void onAdClickRouterCompleted(boolean didRoute) {\n                // stop showing a loading bar, or handle routing yourself if didRoute is false\n            }\n\n            @Override\n            public void onFailure(int errorCode, String errorMessage) {\n                // Log the error\n            }\n        });\n    });\n\n    linksSection.addView(itemView);\n}\n</code></pre>"},{"location":"rec-organic/#3-loading-the-icons","title":"3. Loading The Icons","text":""},{"location":"rec-organic/#case-when-isinstalled-is-true","title":"Case when isInstalled is true","text":"<p>When the app is installed, we recommend just retrieving the icon from the package manager for speed and simplicity.</p> <pre><code>if (resultItem.isInstalled) {\n    // load the icon from the package manager\n    Drawable icon = getPackageManager().getApplicationIcon(resultItem.packageName);\n}\n</code></pre>"},{"location":"rec-organic/#case-when-isinstalled-is-false-load-the-icon-from-the-iconurl","title":"Case when isInstalled is false - load the icon from the iconUrl","text":"<p>When the app is not installed, we have provided a convenient method to load the icon from the iconUrl. You can also retrieve the iconUrl from the ad unit object and handle this yourself if you prefer.</p>"},{"location":"rec-organic/#synchronously","title":"Synchronously","text":"<p>To be called on a background thread.</p> <pre><code>if (!resultItem.isInstalled) {\n    // load the icon from the iconUrl\n    Drawable icon = resultItem.loadCreativeDrawable();\n    // set the image on your UI\n    imageView.setImageDrawable(icon);\n}\n</code></pre>"},{"location":"rec-organic/#asynchrously","title":"Asynchrously","text":"<p>Can be called on the main thread.</p> <pre><code>if (!resultItem.isInstalled) {\n    // load the icon from the iconUrl\n    resultItem.loadCreativeDrawableAsync(new ImageCallback() {\n    @Override\n    public void onImageLoaded(Drawable icon) {\n        // Run on UI thread if updating UI components\n        runOnUiThread(new Runnable() {\n            @Override\n            public void run() {\n                // set the image on your UI\n                imageView.setImageDrawable(image);\n            }\n        });\n    }\n\n    @Override\n    public void onError(String error) {\n        // Log the error, show a default icon, etc\n    }\n});\n}\n</code></pre>"},{"location":"rec-organic/#4-handle-user-click-interaction","title":"4. Handle User Click Interaction","text":"<p>When a user clicks on the ad, use the following code to handle the routing and receive notifications of status.</p> <p>It executes on a separate thread to ensure the click handling URL properly tracks before the user is sent to the destination, and loading could take a second, so it's recommended to show a loading indicator until the callback is fired. Fine to pass null to the clickHandler callback if you don't need to.</p> <pre><code>DeviceNativeAds dna = DeviceNativeAds.getInstance(getApplicationContext());\ndna.fireClickAndRoute(adUnit, new DeviceNativeClickHandler() {\n    /**\n     * This method is called when the ad click routing process is completed, which means the user was\n     * sent to their destination, or it failed to route for soem reason.\n     * @param didRoute A boolean indicating whether the routing was successful.\n     */\n    public void onAdClickRouterCompleted(boolean didRoute) {\n        // stop showing a loading bar, or handle routing yourself if didRoute is false\n    }\n\n    /**\n     * This method is called when there is a failure in the ad click process. Implement this method to\n     * define what should happen when there is a failure in the ad click process.\n     * @param errorCode An integer representing the error code of the failure.\n     * @param errorMessage A string representing the error message of the failure.\n     */\n    public void onFailure(int errorCode, String errorMessage) {\n        // log the fail, stop showing loading bar, etc\n    }\n});\n</code></pre>"},{"location":"rec-organic/#need-help","title":"Need Help?","text":"<p>Please email help@devicenative.com for assistance or questions about the process.</p>"},{"location":"search-ads/","title":"Search Ads Integration Steps","text":"<p>The instructions below will guide you on how to integrate the DNA SDK to power ads-only experiences in your launcher app.</p>"},{"location":"search-ads/#1-retrieve-advertisements-for-search","title":"1. Retrieve Advertisements for Search","text":"<p>To retrieve an advertisement for search, use the following code.</p> <pre><code>DeviceNativeAds dna = DeviceNativeAds.getInstance(getApplicationContext());\nList&lt;DNAResultItem&gt; adUnits = dna.getAdsForSearch(query);\n</code></pre> <p>Note:</p> <ul> <li>There is no need to debounce this call, as we have some simple logic to handle that.</li> <li>This method return an ad in milliseconds, so it's safe to run on the main thread. </li> <li>This will automatically fire an impression immediately if the impressionUrl is populated for each ad. You MUST therefore show all of the ads to the user.</li> </ul>"},{"location":"search-ads/#2-placing-result-items-in-search","title":"2. Placing Result Items in Search","text":"<p>We recommend that you place the ad units for apps that are currently installed in the first position of the search result list. You may even decide to remove your organic results for the same package names from your list, so there are no duplicate results.</p> <p>For the ad units for apps that are not installed, we recommend that you place the ad units for apps that are not installed in the last position of your search result list.</p> <pre><code>for (DNAResultItem adUnit : adUnits) {\n    if (adUnit.isInstalled) {\n        // place the ad unit in the first position of the search result list\n        // maybe remove the organic results for the same package names (adUnit.packageName)\n    } else {\n        // place the ad unit in the last position of the search result list\n    }\n}\n</code></pre>"},{"location":"search-ads/#key-fields-of-dnaresultitem-class","title":"Key Fields of DNAResultItem Class","text":"<ul> <li><code>id</code>: Unique identifier for the ad. Just a UUID for reference if you need</li> <li><code>packageName</code>: The package name of the advertiser's app</li> <li><code>isInstalled</code>: A convenient boolean indicating whether the advertiser's app is installed, derived from package manager</li> <li><code>appName</code>: The name of the advertiser's app</li> <li><code>title</code>: The ad creative title to be shown to the user</li> <li><code>description</code>: The ad creative description to be shown to the user. Can be null!</li> <li><code>iconUrl</code>: The ad creative icon URL to be shown to the user. Can be null!</li> <li><code>clickUrl</code>: The click URL of the ad unit. This will automatically be fired by the SDK when using the click and route method.</li> <li><code>impressionUrl</code>: The impression URL of the ad unit. This will automatically be fired by the SDK when requesting an ad for display.</li> <li><code>eCPM</code>: The expected revenue per thousand impressions for the ad unit. Note that this is not real when the <code>learningMode</code> is true</li> <li><code>learningMode</code>: A boolean indicating whether the ad unit is in eCPM learning mode, and whether the eCPM number can be used.</li> </ul>"},{"location":"search-ads/#3-loading-the-advertisers-icon","title":"3. Loading The Advertiser's Icon","text":""},{"location":"search-ads/#case-when-isinstalled-is-true","title":"Case when isInstalled is true","text":"<p>When the app is installed, we recommend just retrieving the icon from the package manager for speed and simplicity.</p> <pre><code>if (adUnit.isInstalled) {\n    // load the icon from the package manager\n    Drawable icon = getPackageManager().getApplicationIcon(adUnit.packageName);\n}\n</code></pre>"},{"location":"search-ads/#case-when-isinstalled-is-false-load-the-icon-from-the-iconurl","title":"Case when isInstalled is false - load the icon from the iconUrl","text":"<p>When the app is not installed, we have provided a convenient method to load the icon from the iconUrl. You can also retrieve the iconUrl from the ad unit object and handle this yourself if you prefer.</p>"},{"location":"search-ads/#synchronously","title":"Synchronously","text":"<p>To be called on a background thread.</p> <pre><code>if (!adUnit.isInstalled) {\n    // load the icon from the iconUrl\n    Drawable icon = adUnit.loadCreativeDrawable();\n    // set the image on your UI\n    imageView.setImageDrawable(icon);\n}\n</code></pre>"},{"location":"search-ads/#asynchrously","title":"Asynchrously","text":"<p>Can be called on the main thread.</p> <pre><code>if (!adUnit.isInstalled) {\n    // load the icon from the iconUrl\n    adUnit.loadCreativeDrawableAsync(new ImageCallback() {\n    @Override\n    public void onImageLoaded(Drawable icon) {\n        // Run on UI thread if updating UI components\n        runOnUiThread(new Runnable() {\n            @Override\n            public void run() {\n                // set the image on your UI\n                imageView.setImageDrawable(image);\n            }\n        });\n    }\n\n    @Override\n    public void onError(String error) {\n        // Log the error, show a default icon, etc\n    }\n});\n}\n</code></pre>"},{"location":"search-ads/#4-handle-user-click-interaction","title":"4. Handle User Click Interaction","text":"<p>When a user clicks on the ad, use the following code to handle the routing and receive notifications of status.</p> <p>It executes on a separate thread to ensure the click handling URL properly tracks before the user is sent to the destination, and loading could take a second, so it's recommended to show a loading indicator until the callback is fired. Fine to pass null to the clickHandler callback if you don't need to.</p> <pre><code>DeviceNativeAds dna = DeviceNativeAds.getInstance(getApplicationContext());\ndna.fireClickAndRoute(adUnit, new DeviceNativeClickHandler() {\n    /**\n     * This method is called when the ad click routing process is completed, which means the user was\n     * sent to their destination, or it failed to route for soem reason.\n     * @param didRoute A boolean indicating whether the routing was successful.\n     */\n    public void onAdClickRouterCompleted(boolean didRoute) {\n        // stop showing a loading bar, or handle routing yourself if didRoute is false\n    }\n\n    /**\n     * This method is called when there is a failure in the ad click process. Implement this method to\n     * define what should happen when there is a failure in the ad click process.\n     * @param errorCode An integer representing the error code of the failure.\n     * @param errorMessage A string representing the error message of the failure.\n     */\n    public void onFailure(int errorCode, String errorMessage) {\n        // log the fail, stop showing loading bar, etc\n    }\n});\n</code></pre>"},{"location":"search-ads/#need-help","title":"Need Help?","text":"<p>Please email help@devicenative.com for assistance or questions about the process.</p>"},{"location":"search-organic/","title":"Search Integration Steps","text":"<p>The instructions below will guide you on how to integrate the DNA SDK to power ads-only experiences in your launcher app.</p>"},{"location":"search-organic/#1-retrieve-results-for-search-results","title":"1. Retrieve Results for Search Results","text":"<p>To retrieve suggested apps for immediate display, use the following code. </p> <pre><code>DeviceNativeAds dna = DeviceNativeAds.getInstance(getApplicationContext());\nList&lt;DNAResultItem&gt; searchResults = dna.getOrganicResultsForSearch(query);\n</code></pre> <p>Note:</p> <ul> <li>There is no need to debounce this call, as we have some simple logic to handle that.</li> <li>Results will be ranked by relevance, so the first result will be the most relevant.</li> <li>Ads will be mixed into the link results</li> <li>This method return an results in milliseconds, so it's safe to run on the main thread. </li> <li>This will automatically fire an impression immediately if the impressionUrl is populated for each ad. You MUST therefore show all of the ads to the user.</li> </ul>"},{"location":"search-organic/#key-fields-of-dnaresultitem-class","title":"Key Fields of DNAResultItem Class","text":"<ul> <li><code>id</code>: Unique identifier for the ad. Just a UUID for reference if you need</li> <li><code>resultType</code> : The type of result. Will be <code>DNAResultItem.TYPE_AD</code> for ads.<ul> <li><code>DNAResultItem.TYPE_APP</code>: For organic app results,</li> <li><code>DNAResultItem.TYPE_AD</code>: For advertisements</li> <li><code>DNAResultItem.TYPE_SHORTCUT</code>: For shortcuts and deep links (only returned for getOrganicLinkSuggestions)</li> <li><code>DNAResultItem.TYPE_NOTIFICATION</code>: For notificiations (only returned for getOrganicLinkSuggestions)</li> </ul> </li> <li><code>packageName</code>: The package name of the advertiser's app</li> <li><code>isInstalled</code>: A convenient boolean indicating whether the advertiser's app is installed, derived from package manager</li> <li><code>appName</code>: The name of the advertiser's app</li> <li><code>title</code>: The ad creative title to be shown to the user</li> <li><code>description</code>: The ad creative description to be shown to the user. Can be null!</li> <li><code>iconUrl</code>: The ad creative icon URL to be shown to the user. Can be null!</li> <li><code>clickUrl</code>: The click URL of the ad unit. This will automatically be fired by the SDK when using the click and route method.</li> <li><code>impressionUrl</code>: The impression URL of the ad unit. This will automatically be fired by the SDK when requesting an ad for display.</li> <li><code>eCPM</code>: The expected revenue per thousand impressions for the ad unit. Note that this is not real when the <code>learningMode</code> is true</li> <li><code>learningMode</code>: A boolean indicating whether the ad unit is in eCPM learning mode, and whether the eCPM number can be used.</li> </ul>"},{"location":"search-organic/#example-implementation","title":"Example Implementation","text":"<p>Here's an example iteration through the deep link results to show an example implementation:</p> <pre><code>List&lt;DNAResultItem&gt; results = DeviceNativeAds.getInstance(this).getOrganicLinkSuggestions(3);\nfor (DNAResultItem resultItem : results) {\n    View itemView = getLayoutInflater().inflate(R.layout.result_view, section, false);\n\n    ImageView itemIcon = itemView.findViewById(R.id.item_icon);\n    TextView itemTitle = itemView.findViewById(R.id.item_title);\n    TextView itemDescription = itemView.findViewById(R.id.item_description);\n\n    // Please indent the link results for best visual appearance\n    if (!resultItem.resultType.equals(DNAResultItem.TYPE_APP) &amp;&amp; !resultItem.resultType.equals(DNAResultItem.TYPE_AD)) {\n        insertLeftPadding(itemIcon, 16);\n    }\n\n    // Load the icon in the case where it is not just the app icon\n    if (resultItem.resultType.equals(DNAResultItem.TYPE_AD) || resultItem.resultType.equals(DNAResultItem.TYPE_SHORTCUT)) {\n        resultItem.loadCreativeDrawableAsync(this, new DNAResultItem.ImageCallback() {\n            @Override\n            public void onImageLoaded(Drawable icon) {\n                new Thread(() -&gt; {\n                    runOnUiThread(() -&gt; {\n                        if (icon == null) {\n                            try {\n                                Drawable backupIcon = getPackageManager().getApplicationIcon(resultItem.packageName);\n                                itemIcon.setImageDrawable(backupIcon);\n                            } catch (Exception e) {\n                                Log.e(\"YourActivity\", \"Error loading app icon: \" + e.getMessage());\n                            }\n                        } else {\n                            itemIcon.setImageDrawable(icon);\n                        }\n                    });\n                }).start();\n            }\n\n            @Override\n            public void onError(String message) {\n                try {\n                    Drawable icon = getPackageManager().getApplicationIcon(resultItem.packageName);\n                    itemIcon.setImageDrawable(icon);\n                } catch (Exception e) {\n                    Log.e(\"YourActivity\", \"Error loading app icon: \" + e.getMessage());\n                }\n            }\n        });\n    } else {\n        try {\n            Drawable icon = getPackageManager().getApplicationIcon(resultItem.packageName);\n            itemIcon.setImageDrawable(icon);\n        } catch (Exception e) {\n            Log.e(\"YourActivity\", \"Error loading app icon: \" + e.getMessage());\n        }\n    }\n\n    itemTitle.setText(resultItem.title);\n    String description = resultItem.description;\n    if (resultItem.resultType.equals(DNAResultItem.TYPE_AD)) {\n        if (description != null &amp;&amp; !description.isEmpty()) {\n            description = description.concat(\" - Ad\");\n        } else {\n            description = \"Promoted\";\n        }\n    }\n    if (description == null || description.isEmpty()) {\n        itemDescription.setVisibility(View.GONE);\n    } else {\n        itemDescription.setText(description);\n    }\n\n    itemView.setOnClickListener(view -&gt; {\n        // Show some loading bar while the click is being processed\n        DeviceNativeAds.getInstance(this).fireClickAndRoute(resultItem, new DeviceNativeClickHandler() {\n            @Override\n            public void onAdClickRouterCompleted(boolean didRoute) {\n                // stop showing a loading bar, or handle routing yourself if didRoute is false\n            }\n\n            @Override\n            public void onFailure(int errorCode, String errorMessage) {\n                // Log the error\n            }\n        });\n    });\n\n    linksSection.addView(itemView);\n}\n</code></pre> <p>Here's an example implementation that inserts the left padding.</p> <pre><code>private void insertLeftPadding(View view, int padding) {\n    // Convert dp to pixels\n    final float scale = getResources().getDisplayMetrics().density;\n    int leftPaddingInPx = (int) (padding * scale + 0.5f);\n\n    // Get existing paddings for top, right, and bottom to preserve them.\n    int topPadding = view.getPaddingTop();\n    int rightPadding = view.getPaddingRight();\n    int bottomPadding = view.getPaddingBottom();\n\n    // Set the new padding. Only the left padding is changed.\n    view.setPadding(leftPaddingInPx, topPadding, rightPadding, bottomPadding);\n}\n</code></pre>"},{"location":"search-organic/#2-loading-the-icons","title":"2. Loading The Icons","text":""},{"location":"search-organic/#case-when-isinstalled-is-true","title":"Case when isInstalled is true","text":"<p>When the app is installed, we recommend just retrieving the icon from the package manager for speed and simplicity.</p> <pre><code>if (resultItem.isInstalled) {\n    // load the icon from the package manager\n    Drawable icon = getPackageManager().getApplicationIcon(resultItem.packageName);\n}\n</code></pre>"},{"location":"search-organic/#case-when-isinstalled-is-false-load-the-icon-from-the-iconurl","title":"Case when isInstalled is false - load the icon from the iconUrl","text":"<p>When the app is not installed, we have provided a convenient method to load the icon from the iconUrl. You can also retrieve the iconUrl from the ad unit object and handle this yourself if you prefer.</p>"},{"location":"search-organic/#synchronously","title":"Synchronously","text":"<p>To be called on a background thread.</p> <pre><code>if (!resultItem.isInstalled) {\n    // load the icon from the iconUrl\n    Drawable icon = resultItem.loadCreativeDrawable();\n    // set the image on your UI\n    imageView.setImageDrawable(icon);\n}\n</code></pre>"},{"location":"search-organic/#asynchrously","title":"Asynchrously","text":"<p>Can be called on the main thread.</p> <pre><code>if (!resultItem.isInstalled) {\n    // load the icon from the iconUrl\n    resultItem.loadCreativeDrawableAsync(new ImageCallback() {\n    @Override\n    public void onImageLoaded(Drawable icon) {\n        // Run on UI thread if updating UI components\n        runOnUiThread(new Runnable() {\n            @Override\n            public void run() {\n                // set the image on your UI\n                imageView.setImageDrawable(image);\n            }\n        });\n    }\n\n    @Override\n    public void onError(String error) {\n        // Log the error, show a default icon, etc\n    }\n});\n}\n</code></pre>"},{"location":"search-organic/#3-handle-user-click-interaction","title":"3. Handle User Click Interaction","text":"<p>When a user clicks on the ad, use the following code to handle the routing and receive notifications of status.</p> <p>It executes on a separate thread to ensure the click handling URL properly tracks before the user is sent to the destination, and loading could take a second, so it's recommended to show a loading indicator until the callback is fired. Fine to pass null to the clickHandler callback if you don't need to.</p> <pre><code>DeviceNativeAds dna = DeviceNativeAds.getInstance(getApplicationContext());\ndna.fireClickAndRoute(adUnit, new DeviceNativeClickHandler() {\n    /**\n     * This method is called when the ad click routing process is completed, which means the user was\n     * sent to their destination, or it failed to route for soem reason.\n     * @param didRoute A boolean indicating whether the routing was successful.\n     */\n    public void onAdClickRouterCompleted(boolean didRoute) {\n        // stop showing a loading bar, or handle routing yourself if didRoute is false\n    }\n\n    /**\n     * This method is called when there is a failure in the ad click process. Implement this method to\n     * define what should happen when there is a failure in the ad click process.\n     * @param errorCode An integer representing the error code of the failure.\n     * @param errorMessage A string representing the error message of the failure.\n     */\n    public void onFailure(int errorCode, String errorMessage) {\n        // log the fail, stop showing loading bar, etc\n    }\n});\n</code></pre>"},{"location":"search-organic/#need-help","title":"Need Help?","text":"<p>Please email help@devicenative.com for assistance or questions about the process.</p>"},{"location":"terms/","title":"Terms","text":"<p>Website Terms of Use</p> <p>Version 1.0</p> <p>Last revised on: January 28, 2024</p> <p>The website located at devicenative.com (the \" Site\") is a copyrighted work belonging to Device Native, Inc (\" Company\", \" us\", \" our\", and \" we\"). Certain features of the Site may be subject to additional guidelines, terms, or rules, which will be posted on the Site in connection with such features. All such additional terms, guidelines, and rules are incorporated by reference into these Terms.</p> <p>These Terms of Use (these \" Terms\") set forth the legally binding terms and conditions that govern your use of the Site. By accessing or using the Site, you are accepting these Terms (on behalf of yourself or the entity that you represent), and you represent and warrant that you have the right, authority, and capacity to enter into these Terms (on behalf of yourself or the entity that you represent). you may not access or use the Site or accept the Terms if you are not at least 18 years old. If you do not agree with all of the provisions of these Terms, do not access and/or use the Site.</p> <p>PLEASE BE AWARE THAT SECTION 8.2 CONTAINS PROVISIONS GOVERNING HOW TO RESOLVE DISPUTES BETWEEN YOU AND COMPANY. AMONG OTHER THINGS, SECTION 8.2 INCLUDES AN AGREEMENT TO ARBITRATE WHICH REQUIRES, WITH LIMITED EXCEPTIONS, THAT ALL DISPUTES BETWEEN YOU AND US SHALL BE RESOLVED BY BINDING AND FINAL ARBITRATION. SECTION 8.2 ALSO CONTAINS A CLASS ACTION AND JURY TRIAL WAIVER. PLEASE READ SECTION 8.2 CAREFULLY .</p> <p>UNLESS YOU OPT OUT OF THE AGREEMENT TO ARBITRATE WITHIN 30 DAYS: (1) YOU WILL ONLY BE PERMITTED TO PURSUE DISPUTES OR CLAIMS AND SEEK RELIEF AGAINST US ON AN INDIVIDUAL BASIS, NOT AS A PLAINTIFF OR CLASS MEMBER IN ANY CLASS OR REPRESENTATIVE ACTION OR PROCEEDING AND YOU WAIVE YOUR RIGHT TO PARTICIPATE IN A CLASS ACTION LAWSUIT OR CLASS-WIDE ARBITRATION; AND (2) YOU ARE WAIVING YOUR RIGHT TO PURSUE DISPUTES OR CLAIMS AND SEEK RELIEF IN A COURT OF LAW AND TO HAVE A JURY TRIAL.</p> <ol> <li> <p>Accounts</p> <ol> <li>Account Creation. In order to use certain features of the Site, you must register for an account (\" Account\") and provide certain information about yourself as prompted by the account registration form. You represent and warrant that: (a) all required registration information you submit is truthful and accurate; (b) you will maintain the accuracy of such information. You may delete your Account at any time, for any reason, by following the instructions on the Site. Company may suspend or terminate your Account in accordance with Section 7.</li> <li>Account Responsibilities. You are responsible for maintaining the confidentiality of your Account login information and are fully responsible for all activities that occur under your Account. You agree to immediately notify Company of any unauthorized use, or suspected unauthorized use of your Account or any other breach of security. Company cannot and will not be liable for any loss or damage arising from your failure to comply with the above requirements.</li> </ol> </li> <li> <p>Access to the Site</p> <ol> <li>License. Subject to these Terms, Company grants you a non-transferable, non-exclusive, revocable, limited license to use and access the Site solely for your own personal, noncommercial use.</li> <li>Certain Restrictions. The rights granted to you in these Terms are subject to the following restrictions: (a) you shall not license, sell, rent, lease, transfer, assign, distribute, host, or otherwise commercially exploit the Site, whether in whole or in part, or any content displayed on the Site; (b) you shall not modify, make derivative works of, disassemble, reverse compile or reverse engineer any part of the Site; (c) you shall not access the Site in order to build a similar or competitive website, product, or service; and (d) except as expressly stated herein, no part of the Site may be copied, reproduced, distributed, republished, downloaded, displayed, posted or transmitted in any form or by any means. Unless otherwise indicated, any future release, update, or other addition to functionality of the Site shall be subject to these Terms. All copyright and other proprietary notices on the Site (or on any content displayed on the Site) must be retained on all copies thereof.</li> <li>Modification. Company reserves the right, at any time, to modify, suspend, or discontinue the Site (in whole or in part) with or without notice to you. You agree that Company will not be liable to you or to any third party for any modification, suspension, or discontinuation of the Site or any part thereof.</li> <li>No Support or Maintenance. You acknowledge and agree that Company will have no obligation to provide you with any support or maintenance in connection with the Site.</li> <li>Ownership. You acknowledge that all the intellectual property rights, including copyrights, patents, trade marks, and trade secrets, in the Site and its content are owned by Company or Company's suppliers. Neither these Terms (nor your access to the Site) transfers to you or any third party any rights, title or interest in or to such intellectual property rights, except for the limited access rights expressly set forth in Section 2.1. Company and its suppliers reserve all rights not granted in these Terms. There are no implied licenses granted under these Terms.</li> <li>Feedback. If you provide Company with any feedback or suggestions regarding the Site (\" Feedback\"), you hereby assign to Company all rights in such Feedback and agree that Company shall have the right to use and fully exploit such Feedback and related information in any manner it deems appropriate. Company will treat any Feedback you provide to Company as non-confidential and non-proprietary. You agree that you will not submit to Company any information or ideas that you consider to be confidential or proprietary.</li> </ol> </li> <li> <p>Indemnification. You agree to indemnify and hold Company (and its officers, employees, and agents) harmless, including costs and attorneys' fees, from any claim or demand made by any third party due to or arising out of (a) your use of the Site, (b) your violation of these Terms or (c) your violation of applicable laws or regulations. Company reserves the right, at your expense, to assume the exclusive defense and control of any matter for which you are required to indemnify us, and you agree to cooperate with our defense of these claims. You agree not to settle any matter without the prior written consent of Company. Company will use reasonable efforts to notify you of any such claim, action or proceeding upon becoming aware of it.</p> </li> <li> <p>Third-Party Links &amp; Ads; Other Users</p> <ol> <li>Third-Party Links &amp; Ads. The Site may contain links to third-party websites and services, and/or display advertisements for third parties (collectively, \" Third-Party Links &amp; Ads\"). Such Third-Party Links &amp; Ads are not under the control of Company, and Company is not responsible for any Third-Party Links &amp; Ads. Company provides access to these Third-Party Links &amp; Ads only as a convenience to you, and does not review, approve, monitor, endorse, warrant, or make any representations with respect to Third-Party Links &amp; Ads. You use all Third-Party Links &amp; Ads at your own risk, and should apply a suitable level of caution and discretion in doing so. When you click on any of the Third-Party Links &amp; Ads, the applicable third party's terms and policies apply, including the third party's privacy and data gathering practices. You should make whatever investigation you feel necessary or appropriate before proceeding with any transaction in connection with such Third-Party Links &amp; Ads.</li> <li>Other Users. Your interactions with other Site users are solely between you and such users. You agree that Company will not be responsible for any loss or damage incurred as the result of any such interactions. If there is a dispute between you and any Site user, we are under no obligation to become involved.</li> <li>Release. You hereby release and forever discharge Company (and our officers, employees, agents, successors, and assigns) from, and hereby waive and relinquish, each and every past, present and future dispute, claim, controversy, demand, right, obligation, liability, action and cause of action of every kind and nature (including personal injuries, death, and property damage), that has arisen or arises directly or indirectly out of, or that relates directly or indirectly to, the Site (including any interactions with, or act or omission of, other Site users or any Third-Party Links &amp; Ads). IF YOU ARE A CALIFORNIA RESIDENT, YOU HEREBY WAIVE CALIFORNIA CIVIL CODE SECTION 1542 IN CONNECTION WITH THE FOREGOING, WHICH STATES: \"A GENERAL RELEASE DOES NOT EXTEND TO CLAIMS WHICH THE CREDITOR OR RELEASING PARTY DOES NOT KNOW OR SUSPECT TO EXIST IN HIS OR HER FAVOR AT THE TIME OF EXECUTING THE RELEASE, WHICH IF KNOWN BY HIM OR HER MUST HAVE MATERIALLY AFFECTED HIS OR HER SETTLEMENT WITH THE DEBTOR OR RELEASED PARTY.\"</li> </ol> </li> <li> <p>Disclaimers</p> <p>THE SITE IS PROVIDED ON AN \"AS-IS\" AND \"AS AVAILABLE\" BASIS, AND COMPANY (AND OUR SUPPLIERS) EXPRESSLY DISCLAIM ANY AND ALL WARRANTIES AND CONDITIONS OF ANY KIND, WHETHER EXPRESS, IMPLIED, OR STATUTORY, INCLUDING ALL WARRANTIES OR CONDITIONS OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE, QUIET ENJOYMENT, ACCURACY, OR NON-INFRINGEMENT. WE (AND OUR SUPPLIERS) MAKE NO WARRANTY THAT THE SITE WILL MEET YOUR REQUIREMENTS, WILL BE AVAILABLE ON AN UNINTERRUPTED, TIMELY, SECURE, OR ERROR-FREE BASIS, OR WILL BE ACCURATE, RELIABLE, FREE OF VIRUSES OR OTHER HARMFUL CODE, COMPLETE, LEGAL, OR SAFE. IF APPLICABLE LAW REQUIRES ANY WARRANTIES WITH RESPECT TO THE SITE, ALL SUCH WARRANTIES ARE LIMITED IN DURATION TO 90 DAYS FROM THE DATE OF FIRST USE.</p> <p>SOME JURISDICTIONS DO NOT ALLOW THE EXCLUSION OF IMPLIED WARRANTIES, SO THE ABOVE EXCLUSION MAY NOT APPLY TO YOU. SOME JURISDICTIONS DO NOT ALLOW LIMITATIONS ON HOW LONG AN IMPLIED WARRANTY LASTS, SO THE ABOVE LIMITATION MAY NOT APPLY TO YOU.</p> </li> <li> <p>Limitation on Liability</p> <p>TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL COMPANY (OR OUR SUPPLIERS) BE LIABLE TO YOU OR ANY THIRD PARTY FOR ANY LOST PROFITS, LOST DATA, COSTS OF PROCUREMENT OF SUBSTITUTE PRODUCTS, OR ANY INDIRECT, CONSEQUENTIAL, EXEMPLARY, INCIDENTAL, SPECIAL OR PUNITIVE DAMAGES ARISING FROM OR RELATING TO THESE TERMS OR YOUR USE OF, OR INABILITY TO USE, THE SITE, EVEN IF COMPANY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. ACCESS TO, AND USE OF, THE SITE IS AT YOUR OWN DISCRETION AND RISK, AND YOU WILL BE SOLELY RESPONSIBLE FOR ANY DAMAGE TO YOUR DEVICE OR COMPUTER SYSTEM, OR LOSS OF DATA RESULTING THEREFROM.</p> <p>TO THE MAXIMUM EXTENT PERMITTED BY LAW, NOTWITHSTANDING ANYTHING TO THE CONTRARY CONTAINED HEREIN, OUR LIABILITY TO YOU FOR ANY DAMAGES ARISING FROM OR RELATED TO THESE TERMS (FOR ANY CAUSE WHATSOEVER AND REGARDLESS OF THE FORM OF THE ACTION), WILL AT ALL TIMES BE LIMITED TO A MAXIMUM OF FIFTY US DOLLARS. THE EXISTENCE OF MORE THAN ONE CLAIM WILL NOT ENLARGE THIS LIMIT. YOU AGREE THAT OUR SUPPLIERS WILL HAVE NO LIABILITY OF ANY KIND ARISING FROM OR RELATING TO THESE TERMS.</p> <p>SOME JURISDICTIONS DO NOT ALLOW THE LIMITATION OR EXCLUSION OF LIABILITY FOR INCIDENTAL OR CONSEQUENTIAL DAMAGES, SO THE ABOVE LIMITATION OR EXCLUSION MAY NOT APPLY TO YOU.</p> </li> <li> <p>Term and Termination. Subject to this Section, these Terms will remain in full force and effect while you use the Site. We may suspend or terminate your rights to use the Site (including your Account) at any time for any reason at our sole discretion, including for any use of the Site in violation of these Terms. Upon termination of your rights under these Terms, your Account and right to access and use the Site will terminate immediately. Company will not have any liability whatsoever to you for any termination of your rights under these Terms, including for termination of your Account. Even after your rights under these Terms are terminated, the following provisions of these Terms will remain in effect: Sections 2.2 through 2.6 and Sections 3 through 8.</p> </li> <li> <p>General</p> <ol> <li> <p>Changes. These Terms are subject to occasional revision, and if we make any substantial changes, we may notify you by sending you an e-mail to the last e-mail address you provided to us (if any), and/or by prominently posting notice of the changes on our Site. You are responsible for providing us with your most current e-mail address. In the event that the last e-mail address that you have provided us is not valid, or for any reason is not capable of delivering to you the notice described above, our dispatch of the e-mail containing such notice will nonetheless constitute effective notice of the changes described in the notice. Continued use of our Site following notice of such changes shall indicate your acknowledgement of such changes and agreement to be bound by the terms and conditions of such changes.</p> </li> <li> <p>Dispute Resolution. Please read the following arbitration agreement in this Section (the \" Arbitration Agreement\") carefully.    It requires you to arbitrate disputes with Company, its parent companies, subsidiaries, affiliates, successors and assigns and all of their respective officers, directors, employees, agents, and representatives (collectively, the \" Company Parties\") and limits the manner in which you can seek relief from the Company Parties.</p> <ol> <li>Applicability of Arbitration Agreement You agree that any dispute between you and any of the Company Parties relating in any way to the Site, the services offered on the Site (the \" Services\") or these Terms will be resolved by binding arbitration, rather than in court, except that (1) you and the Company Parties may assert individualized claims in small claims court if the claims qualify, remain in such court and advance solely on an individual, non-class basis; and (2) you or the Company Parties may seek equitable relief in court for infringement or other misuse of intellectual property rights (such as trademarks, trade dress, domain names, trade secrets, copyrights, and patents).    This Arbitration Agreement shall survive the expiration or termination of these Terms and shall apply, without limitation, to all claims that arose or were asserted before you agreed to these Terms (in accordance with the preamble) or any prior version of these Terms. ** This Arbitration Agreement does not preclude you from bringing issues to the attention of federal, state or local agencies. Such agencies can, if the law allows, seek relief against the Company Parties on your behalf. For purposes of this Arbitration Agreement, \" Dispute**\" will also include disputes that arose or involve facts occurring before the existence of this or any prior versions of the Agreement as well as claims that may arise after the termination of these Terms.</li> <li>Informal Dispute Resolution. There might be instances when a Dispute arises between you and Company. If that occurs, Company is committed to working with you to reach a reasonable resolution. You and Company agree that good faith informal efforts to resolve Disputes can result in a prompt, low\u2010cost and mutually beneficial outcome. You and Company therefore agree that before either party commences arbitration against the other (or initiates an action in small claims court if a party so elects), we will personally meet and confer telephonically or via videoconference, in a good faith effort to resolve informally any Dispute covered by this Arbitration Agreement (\" Informal Dispute Resolution Conference\"). If you are represented by counsel, your counsel may participate in the conference, but you will also participate in the conference.</li> </ol> <p>The party initiating a Dispute must give notice to the other party in writing of its intent to initiate an Informal Dispute Resolution Conference (\" Notice\"), which shall occur within 45 days after the other party receives such Notice, unless an extension is mutually agreed upon by the parties. Notice to Company that you intend to initiate an Informal Dispute Resolution Conference should be sent by email to: alex@devicenative.com, or by regular mail to PO Box 117673, Burlingame,California94011. The Notice must include: (1) your name, telephone number, mailing address, e\u2010mail address associated with your account (if you have one); (2) the name, telephone number, mailing address and e\u2010mail address of your counsel, if any; and (3) a description of your Dispute.</p> <p>The Informal Dispute Resolution Conference shall be individualized such that a separate conference must be held each time either party initiates a Dispute, even if the same law firm or group of law firms represents multiple users in similar cases, unless all parties agree; multiple individuals initiating a Dispute cannot participate in the same Informal Dispute Resolution Conference unless all parties agree. In the time between a party receiving the Notice and the Informal Dispute Resolution Conference, nothing in this Arbitration Agreement shall prohibit the parties from engaging in informal communications to resolve the initiating party's Dispute. Engaging in the Informal Dispute Resolution Conference is a condition precedent and requirement that must be fulfilled before commencing arbitration. The statute of limitations and any filing fee deadlines shall be tolled while the parties engage in the Informal Dispute Resolution Conference process required by this section.</p> <ol> <li>Arbitration Rules and Forum.    These Terms evidence a transaction involving interstate commerce; and notwithstanding any other provision herein with respect to the applicable substantive law, the Federal Arbitration Act, 9 U.S.C. \u00a7 1 et seq., will govern the interpretation and enforcement of this Arbitration Agreement and any arbitration proceedings. If the Informal Dispute Resolution Process described above does not resolve satisfactorily within 60 days after receipt of your Notice, you and Company agree that either party shall have the right to finally resolve the Dispute through binding arbitration. The Federal Arbitration Act governs the interpretation and enforcement of this Arbitration Agreement. The arbitration will be conducted by JAMS, an established alternative dispute resolution provider. Disputes involving claims and counterclaims with an amount in controversy under $250,000, not inclusive of attorneys' fees and interest, shall be subject to JAMS' most current version of the Streamlined Arbitration Rules and procedures available at http://www.jamsadr.com/rules-streamlined-arbitration/; all other claims shall be subject to JAMS's most current version of the Comprehensive Arbitration Rules and Procedures, available at http://www.jamsadr.com/rules-comprehensive-arbitration/. JAMS's rules are also available at www.jamsadr.com or by calling JAMS at 800-352-5267. A party who wishes to initiate arbitration must provide the other party with a request for arbitration (the \" Request\"). The Request must include: (1) the name, telephone number, mailing address, e\u2010mail address of the party seeking arbitration and the account username (if applicable) as well as the email address associated with any applicable account; (2) a statement of the legal claims being asserted and the factual bases of those claims; (3) a description of the remedy sought and an accurate, good\u2010faith calculation of the amount in controversy in United States Dollars; (4) a statement certifying completion of the Informal Dispute Resolution process as described above; and (5) evidence that the requesting party has paid any necessary filing fees in connection with such arbitration.</li> </ol> <p>If the party requesting arbitration is represented by counsel, the Request shall also include counsel's name, telephone number, mailing address, and email address. Such counsel must also sign the Request. By signing the Request, counsel certifies to the best of counsel's knowledge, information, and belief, formed after an inquiry reasonable under the circumstances, that: (1) the Request is not being presented for any improper purpose, such as to harass, cause unnecessary delay, or needlessly increase the cost of dispute resolution; (2) the claims, defenses and other legal contentions are warranted by existing law or by a nonfrivolous argument for extending, modifying, or reversing existing law or for establishing new law; and (3) the factual and damages contentions have evidentiary support or, if specifically so identified, will likely have evidentiary support after a reasonable opportunity for further investigation or discovery.</p> <p>Unless you and Company otherwise agree, or the Batch Arbitration process discussed in Subsection 8.2(h) is triggered, the arbitration will be conducted in the county where you reside. Subject to the JAMS Rules, the arbitrator may direct a limited and reasonable exchange of information between the parties, consistent with the expedited nature of the arbitration. If the JAMS is not available to arbitrate, the parties will select an alternative arbitral forum. Your responsibility to pay any JAMS fees and costs will be solely as set forth in the applicable JAMS Rules.</p> <p>You and Company agree that all materials and documents exchanged during the arbitration proceedings shall be kept confidential and shall not be shared with anyone except the parties' attorneys, accountants, or business advisors, and then subject to the condition that they agree to keep all materials and documents exchanged during the arbitration proceedings confidential.</p> <ol> <li> <p>Authority of Arbitrator. The arbitrator shall have exclusive authority to resolve all disputes subject to arbitration hereunder including, without limitation, any dispute related to the interpretation, applicability, enforceability or formation of this Arbitration Agreement or any portion of the Arbitration Agreement, except for the following: (1) all Disputes arising out of or relating to the subsection entitled \"Waiver of Class or Other Non-Individualized Relief,\" including any claim that all or part of the subsection entitled \"Waiver of Class or Other Non-Individualized Relief\" is unenforceable, illegal, void or voidable, or that such subsection entitled \"Waiver of Class or Other Non-Individualized Relief\" has been breached, shall be decided by a court of competent jurisdiction and not by an arbitrator; (2) except as expressly contemplated in the subsection entitled \"Batch Arbitration,\" all Disputes about the payment of arbitration fees shall be decided only by a court of competent jurisdiction and not by an arbitrator; (3) all Disputes about whether either party has satisfied any condition precedent to arbitration shall be decided only by a court of competent jurisdiction and not by an arbitrator; and (4) all Disputes about which version of the Arbitration Agreement applies shall be decided only by a court of competent jurisdiction and not by an arbitrator. The arbitration proceeding will not be consolidated with any other matters or joined with any other cases or parties, except as expressly provided in the subsection entitled \"Batch Arbitration.\" The arbitrator shall have the authority to grant motions dispositive of all or part of any claim or dispute. The arbitrator shall have the authority to award monetary damages and to grant any non-monetary remedy or relief available to an individual party under applicable law, the arbitral forum's rules, and these Terms (including the Arbitration Agreement). The arbitrator shall issue a written award and statement of decision describing the essential findings and conclusions on which any award (or decision not to render an award) is based, including the calculation of any damages awarded. The arbitrator shall follow the applicable law. The award of the arbitrator is final and binding upon you and us. Judgment on the arbitration award may be entered in any court having jurisdiction.</p> </li> <li> <p>Waiver of Jury Trial.    EXCEPT AS SPECIFIED in section 8.2(a)YOU AND THE COMPANY PARTIES HEREBY WAIVE ANY CONSTITUTIONAL AND STATUTORY RIGHTS TO SUE IN COURT AND HAVE A TRIAL IN FRONT OF A JUDGE OR A JURY. You and the Company Parties are instead electing that all covered claims and disputes shall be resolved exclusively by arbitration under this Arbitration Agreement, except as specified in Section 8.2(a) above. An arbitrator can award on an individual basis the same damages and relief as a court and must follow these Terms as a court would. However, there is no judge or jury in arbitration, and court review of an arbitration award is subject to very limited review.</p> </li> <li> <p>Waiver of Class or Other Non-Individualized Relief.     YOU AND COMPANY AGREE THAT, EXCEPT AS SPECIFIED IN SUBSECTION 8.2(h)EACH OF US MAY BRING CLAIMS AGAINST THE OTHER ONLY ON AN INDIVIDUAL BASIS AND NOT ON A CLASS, REPRESENTATIVE, OR COLLECTIVE BASIS, AND THE PARTIES HEREBY WAIVE ALL RIGHTS TO HAVE ANY DISPUTE BE BROUGHT, HEARD, ADMINISTERED, RESOLVED, OR ARBITRATED ON A CLASS, COLLECTIVE, REPRESENTATIVE, OR MASS ACTION BASIS. ONLY INDIVIDUAL RELIEF IS AVAILABLE, AND DISPUTES OF MORE THAN ONE CUSTOMER OR USER CANNOT BE ARBITRATED OR CONSOLIDATED WITH THOSE OF ANY OTHER CUSTOMER OR USER. Subject to this Arbitration Agreement, the arbitrator may award declaratory or injunctive relief only in favor of the individual party seeking relief and only to the extent necessary to provide relief warranted by the party's individual claim. Nothing in this paragraph is intended to, nor shall it, affect the terms and conditions under the Subsection 8.2(h) entitled \"Batch Arbitration.\" Notwithstanding anything to the contrary in this Arbitration Agreement, if a court decides by means of a final decision, not subject to any further appeal or recourse, that the limitations of this subsection, \"Waiver of Class or Other Non-Individualized Relief,\" are invalid or unenforceable as to a particular claim or request for relief (such as a request for public injunctive relief), you and Company agree that that particular claim or request for relief (and only that particular claim or request for relief) shall be severed from the arbitration and may be litigated in the state or federal courts located in the State of California. All other Disputes shall be arbitrated or litigated in small claims court. This subsection does not prevent you or Company from participating in a class-wide settlement of claims.</p> </li> <li> <p>Attorneys' Fees and Costs. The parties shall bear their own attorneys' fees and costs in arbitration unless the arbitrator finds that either the substance of the Dispute or the relief sought in the Request was frivolous or was brought for an improper purpose (as measured by the standards set forth in Federal Rule of Civil Procedure 11(b)). If you or Company need to invoke the authority of a court of competent jurisdiction to compel arbitration, then the party that obtains an order compelling arbitration in such action shall have the right to collect from the other party its reasonable costs, necessary disbursements, and reasonable attorneys' fees incurred in securing an order compelling arbitration. The prevailing party in any court action relating to whether either party has satisfied any condition precedent to arbitration, including the Informal Dispute Resolution Process, is entitled to recover their reasonable costs, necessary disbursements, and reasonable attorneys' fees and costs.</p> </li> <li> <p>Batch Arbitration. To increase the efficiency of administration and resolution of arbitrations, you and Company agree that in the event that there are 100 or more individual Requests of a substantially similar nature filed against Company by or with the assistance of the same law firm, group of law firms, or organizations, within a 30 day period (or as soon as possible thereafter), the JAMS shall (1) administer the arbitration demands in batches of 100 Requests per batch (plus, to the extent there are less than 100 Requests left over after the batching described above, a final batch consisting of the remaining Requests); (2) appoint one arbitrator for each batch; and (3) provide for the resolution of each batch as a single consolidated arbitration with one set of filing and administrative fees due per side per batch, one procedural calendar, one hearing (if any) in a place to be determined by the arbitrator, and one final award (\" Batch Arbitration\").</p> </li> </ol> <p>All parties agree that Requests are of a \"substantially similar nature\" if they arise out of or relate to the same event or factual scenario and raise the same or similar legal issues and seek the same or similar relief. To the extent the parties disagree on the application of the Batch Arbitration process, the disagreeing party shall advise the JAMS, and the JAMS shall appoint a sole standing arbitrator to determine the applicability of the Batch Arbitration process (\" Administrative Arbitrator\"). In an effort to expedite resolution of any such dispute by the Administrative Arbitrator, the parties agree the Administrative Arbitrator may set forth such procedures as are necessary to resolve any disputes promptly. The Administrative Arbitrator's fees shall be paid by Company.</p> <p>You and Company agree to cooperate in good faith with the JAMS to implement the Batch Arbitration process including the payment of single filing and administrative fees for batches of Requests, as well as any steps to minimize the time and costs of arbitration, which may include: (1) the appointment of a discovery special master to assist the arbitrator in the resolution of discovery disputes; and (2) the adoption of an expedited calendar of the arbitration proceedings.</p> <p>This Batch Arbitration provision shall in no way be interpreted as authorizing a class, collective and/or mass arbitration or action of any kind, or arbitration involving joint or consolidated claims under any circumstances, except as expressly set forth in this provision.</p> <ol> <li> <p>30-Day Right to Opt Out.     You have the right to opt out of the provisions of this Arbitration Agreement by sending a timely written notice of your decision to opt out to the following address: PO Box 117673, Burlingame, California 94011, or email to alex@devicenative.com, within 30 days after first becoming subject to this Arbitration Agreement. Your notice must include your name and address and a clear statement that you want to opt out of this Arbitration Agreement. If you opt out of this Arbitration Agreement, all other parts of these Terms will continue to apply to you. Opting out of this Arbitration Agreement has no effect on any other arbitration agreements that you may currently have with us, or may enter into in the future with us.</p> </li> <li> <p>Invalidity, Expiration. Except as provided in the subsection entitled \"Waiver of Class or Other Non-Individualized Relief\", if any part or parts of this Arbitration Agreement are found under the law to be invalid or unenforceable, then such specific part or parts shall be of no force and effect and shall be severed and the remainder of the Arbitration Agreement shall continue in full force and effect. You further agree that any Dispute that you have with Company as detailed in this Arbitration Agreement must be initiated via arbitration within the applicable statute of limitation for that claim or controversy, or it will be forever time barred. Likewise, you agree that all applicable statutes of limitation will apply to such arbitration in the same manner as those statutes of limitation would apply in the applicable court of competent jurisdiction.</p> </li> <li> <p>Modification.    Notwithstanding any provision in these Terms to the contrary, we agree that if Company makes any future material change to this Arbitration Agreement, you may reject that change within 30 days of such change becoming effective by writing Company at the following address: PO Box 117673, Burlingame, California 94011, or email to alex@devicenative.com. Unless you reject the change within 30 days of such change becoming effective by writing to Company in accordance with the foregoing, your continued use of the Site and/or Services, including the acceptance of products and services offered on the Site following the posting of changes to this Arbitration Agreement constitutes your acceptance of any such changes. Changes to this Arbitration Agreement do not provide you with a new opportunity to opt out of the Arbitration Agreement if you have previously agreed to a version of these Terms and did not validly opt out of arbitration. If you reject any change or update to this Arbitration Agreement, and you were bound by an existing agreement to arbitrate Disputes arising out of or relating in any way to your access to or use of the Services or of the Site, any communications you receive, any products sold or distributed through the Site, the Services, or these Terms, the provisions of this Arbitration Agreement as of the date you first accepted these Terms (or accepted any subsequent changes to these Terms) remain in full force and effect. Company will continue to honor any valid opt outs of the Arbitration Agreement that you made to a prior version of these Terms.</p> </li> </ol> </li> <li> <p>Export. The Site may be subject to U.S. export control laws and may be subject to export or import regulations in other countries. You agree not to export, reexport, or transfer, directly or indirectly, any U.S. technical data acquired from Company, or any products utilizing such data, in violation of the United States export laws or regulations.</p> </li> <li> <p>Disclosures. Company is located at the address in Section 8.8. If you are a California resident, you may report complaints to the Complaint Assistance Unit of the Division of Consumer Product of the California Department of Consumer Affairs by contacting them in writing at 400 R Street, Sacramento, CA 95814, or by telephone at (800) 952-5210.</p> </li> <li> <p>Electronic Communications. The communications between you and Company use electronic means, whether you use the Site or send us emails, or whether Company posts notices on the Site or communicates with you via email. For contractual purposes, you (a) consent to receive communications from Company in an electronic form; and (b) agree that all terms and conditions, agreements, notices, disclosures, and other communications that Company provides to you electronically satisfy any legal requirement that such communications would satisfy if it were be in a hardcopy writing. The foregoing does not affect your non-waivable rights.</p> </li> <li> <p>Entire Terms. These Terms constitute the entire agreement between you and us regarding the use of the Site. Our failure to exercise or enforce any right or provision of these Terms shall not operate as a waiver of such right or provision. The section titles in these Terms are for convenience only and have no legal or contractual effect. The word \"including\" means \"including without limitation\". If any provision of these Terms is, for any reason, held to be invalid or unenforceable, the other provisions of these Terms will be unimpaired and the invalid or unenforceable provision will be deemed modified so that it is valid and enforceable to the maximum extent permitted by law. Your relationship to Company is that of an independent contractor, and neither party is an agent or partner of the other. These Terms, and your rights and obligations herein, may not be assigned, subcontracted, delegated, or otherwise transferred by you without Company's prior written consent, and any attempted assignment, subcontract, delegation, or transfer in violation of the foregoing will be null and void. Company may freely assign these Terms. The terms and conditions set forth in these Terms shall be binding upon assignees.</p> </li> <li> <p>Copyright/Trademark Information. Copyright \u00a9 2024 Device Native, Inc. All rights reserved. Alltrademarks, logos and service marks (\" Marks\") displayed on the Site are our property or the property of other third parties. You are not permitted to use these Marks without our prior written consent or the consent of such third party which may own the Marks.</p> </li> <li> <p>Contact Information:     Alexander Austin     Address:     PO Box 117673     Burlingame, California 94011     Telephone: 8312777480     Email: alex@devicenative.com</p> </li> </ol> </li> </ol>"},{"location":"vivo-app-drawer/","title":"DNA - vivo Integration Proposals","text":"<p>Date: 2024-10-24</p> <p>Below are the proposed integration steps to accommodate vivo's App Drawer integration product spec.</p> <ol> <li>DNA SDK Integration</li> <li>App Drawer Recommended Apps Integration<ol> <li>User opens App Drawer app</li> <li>Call the DNA SDK to get ads for Slot 4 and Slot 8</li> <li>vivo retrieves its own Recommended Apps list</li> <li>Deduplicate DNA results from vivo's organic results</li> <li>Load ad creative in the UI</li> <li>Fire impressions for the ads</li> <li>Send user click to DNA for routing</li> <li>Do not cache the results</li> </ol> </li> </ol>"},{"location":"vivo-app-drawer/#dna-sdk-integration","title":"DNA SDK Integration","text":"<p>DNA SDK \u96c6\u6210</p> <p>See vivo-sdk-changelog for release details.</p>"},{"location":"vivo-app-drawer/#1-add-aar-dependency","title":"1. Add AAR Dependency","text":"<p>1 \u6dfb\u52a0 AAR \u4f9d\u8d56</p> <p>The DeviceNativeAds SDK is distributed as an AAR file. Follow the instructions below to install it. DeviceNativeAds SDK \u4ee5 AAR \u6587\u4ef6\u7684\u5f62\u5f0f\u5206\u53d1\u3002\u8bf7\u6309\u7167\u4ee5\u4e0b\u8bf4\u660e\u8fdb\u884c\u5b89\u88c5\u3002</p>"},{"location":"vivo-app-drawer/#11-download-the-aar-file","title":"1.1. Download the AAR File","text":"<p>1.1. \u4e0b\u8f7d AAR \u6587\u4ef6</p> <p>You can find the latest AAR hosted here: https://dna-hosting.s3.amazonaws.com/public/com.devicenative.dna-vivo-v1.2.1.aar</p>"},{"location":"vivo-app-drawer/#12-place-the-aar-file-in-your-project","title":"1.2 Place the AAR File in your Project","text":"<p>1.2 \u5c06 AAR \u6587\u4ef6\u653e\u7f6e\u5728\u60a8\u7684\u9879\u76ee\u4e2d</p> <p>Place the DeviceNativeAds SDK in the <code>libs</code> folder of your Android project. If you don't have a <code>libs</code> folder, create one. It should be placed in the same folder as your <code>src</code> folder like so:</p> <p>\u5c06 DeviceNativeAds SDK \u653e\u5728 Android \u9879\u76ee\u7684 <code>libs</code> \u6587\u4ef6\u5939\u4e2d\u3002\u5982\u679c\u60a8\u6ca1\u6709 <code>libs</code> \u6587\u4ef6\u5939\uff0c\u8bf7\u521b\u5efa\u4e00\u4e2a\u3002\u5b83\u5e94\u8be5\u4e0e\u60a8\u7684 <code>src</code> \u6587\u4ef6\u5939\u653e\u5728\u540c\u4e00\u76ee\u5f55\u4e0b\uff0c\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>project-folder/src/main/java/com/example/project/MainActivity.java\nproject-folder/libs/com.devicenative.dna-vivo-v1.2.1.aar\n</code></pre>"},{"location":"vivo-app-drawer/#13-add-the-aar-dependency","title":"1.3 Add the AAR Dependency","text":"<p>1.3 \u6dfb\u52a0 AAR \u4f9d\u8d56</p> <p>Add the following dependency to your app's <code>build.gradle</code> file:</p> <p>\u5c06\u4ee5\u4e0b\u4f9d\u8d56\u9879\u6dfb\u52a0\u5230\u60a8\u5e94\u7528\u7684 <code>build.gradle</code> \u6587\u4ef6\u4e2d\uff1a</p> <pre><code>dependencies {\n    implementation files('libs/com.devicenative.dna-vivo-v1.2.1.aar')\n}\n</code></pre> <p>or some Gradle versions:</p> <p>\u6216\u8005\u5bf9\u4e8e\u67d0\u4e9b Gradle \u7248\u672c\uff1a</p> <pre><code>dependencies {\n    implementation(files('libs/com.devicenative.dna-vivo-v1.2.1.aar'))\n}\n</code></pre>"},{"location":"vivo-app-drawer/#2-register-the-data-orchestrator-service","title":"2. Register the Data Orchestrator Service","text":"<p>2 \u6ce8\u518c\u6570\u636e\u7f16\u6392\u670d\u52a1</p> <p>In your AndroidManifest.xml, register the DNADataOrchestrator service and the DNAConfigBuilder service. The DNADataOrchestrator is the main service which coordinates data fetching and processing to deliver fresh advertising results. It will run in your application's process and persist. The DNAConfigBuilder is a one-time use service which runs in a separate process to retrieve the user agent for the device. It will run for approximately 1 second at startup, and not again.</p> <p>\u5728\u60a8\u7684 AndroidManifest.xml \u4e2d\uff0c\u6ce8\u518c DNADataOrchestrator \u670d\u52a1\u548c DNAConfigBuilder \u670d\u52a1\u3002DNADataOrchestrator \u662f\u4e3b\u8981\u670d\u52a1\uff0c\u534f\u8c03\u6570\u636e\u83b7\u53d6\u548c\u5904\u7406\u4ee5\u4ea4\u4ed8\u65b0\u9c9c\u5e7f\u544a\u7ed3\u679c\u3002\u5b83\u5c06\u5728\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u8fdb\u7a0b\u4e2d\u8fd0\u884c\u5e76\u6301\u7eed\u5b58\u5728\u3002DNAConfigBuilder \u662f\u4e00\u6b21\u6027\u670d\u52a1\uff0c\u5728\u5355\u72ec\u7684\u8fdb\u7a0b\u4e2d\u8fd0\u884c\u4ee5\u68c0\u7d22\u8bbe\u5907\u7684 user agent\u3002\u5b83\u5c06\u5728\u542f\u52a8\u65f6\u8fd0\u884c\u7ea6 1 \u79d2\u949f\uff0c\u4e0d\u518d\u8fd0\u884c\u3002</p> <pre><code>&lt;service android:name=\"com.devicenative.dna.DNADataOrchestrator\" /&gt;\n&lt;service\n    android:name=\"com.devicenative.dna.utils.DNAConfigBuilder\"\n    android:process=\":dna_config_builder\"\n    android:exported=\"false\"/&gt;\n</code></pre>"},{"location":"vivo-app-drawer/#3-verify-required-permissions","title":"3. Verify Required Permissions","text":"<p>3 \u9a8c\u8bc1\u6240\u9700\u6743\u9650</p> <p>Make sure to include the following permissions in your AndroidManifest.xml:</p> <p>\u8bf7\u786e\u4fdd\u5728\u60a8\u7684 AndroidManifest.xml \u4e2d\u5305\u542b\u4ee5\u4e0b\u6743\u9650\uff1a</p> <pre><code>&lt;uses-permission android:name=\"android.permission.INTERNET\" /&gt;\n&lt;uses-permission android:name=\"android.permission.QUERY_ALL_PACKAGES\"/&gt;\n&lt;uses-permission android:name=\"android.permission.PACKAGE_USAGE_STATS\"/&gt;\n</code></pre>"},{"location":"vivo-app-drawer/#4-initialize-dna-sdk","title":"4. Initialize DNA SDK","text":"<p>4 \u521d\u59cb\u5316 DNA SDK</p> <p>Initialize the SDK in your Application class's <code>onCreate</code> method:</p> <p>\u5728\u60a8\u7684 Application \u7c7b\u7684 <code>onCreate</code> \u65b9\u6cd5\u4e2d\u521d\u59cb\u5316 SDK\uff1a</p> <pre><code>@Override\npublic void onCreate() {\n    super.onCreate();\n\n    DeviceNativeAds dna = DeviceNativeAds.getInstance(this);\n    dna.init(\"4d37ce02-c110-4b06-ad97-9241e4163dd5\");\n\n    // any other code you have\n}\n</code></pre>"},{"location":"vivo-app-drawer/#7-clean-up-dna-resources","title":"7. Clean Up DNA Resources","text":"<ol> <li>\u6e05\u7406 DNA \u8d44\u6e90</li> </ol> <p>In the Application class's <code>onTerminate</code> method, clean up SDK resources:</p> <p>\u5728 Application \u7c7b\u7684 <code>onTerminate</code> \u65b9\u6cd5\u4e2d\uff0c\u6e05\u7406 SDK \u8d44\u6e90\uff1a</p> <pre><code>@Override\npublic void onTerminate() {\n    super.onTerminate();\n\n    DeviceNativeAds dna = DeviceNativeAds.getInstance(this);\n    dna.destroy();\n\n    // any other code you have\n}\n</code></pre>"},{"location":"vivo-app-drawer/#app-drawer-recommended-apps-integration","title":"App Drawer Recommended Apps Integration","text":"<p>App Drawer \u63a8\u8350\u5e94\u7528\u96c6\u6210</p>"},{"location":"vivo-app-drawer/#introduction","title":"Introduction","text":"<p>\u4ecb\u7ecd</p> <p>This section of the documentation will describe the technical integration to integrate re-engagement ads into Slot 4 and Slot 8 of the App Drawer Recommended Apps section.</p> <p>\u672c\u6587\u6863\u90e8\u5206\u5c06\u63cf\u8ff0\u5c06\u91cd\u65b0\u53c2\u4e0e\u5e7f\u544a\u96c6\u6210\u5230 App Drawer \u63a8\u8350\u5e94\u7528\u90e8\u5206\u7684 Slot 4 \u548c Slot 8 \u7684\u6280\u672f\u96c6\u6210\u3002</p>"},{"location":"vivo-app-drawer/#1-user-opens-app-drawer-app","title":"1: User opens App Drawer app","text":"<ol> <li>\u7528\u6237\u6253\u5f00 App Drawer \u5e94\u7528</li> </ol> <p>Adding this step to indicate that the user has opened the App Drawer app, which is the trigger for the following logic.</p> <p>\u6dfb\u52a0\u6b64\u6b65\u9aa4\u4ee5\u8868\u660e\u7528\u6237\u5df2\u6253\u5f00 App Drawer \u5e94\u7528\uff0c\u8fd9\u662f\u4ee5\u4e0b\u903b\u8f91\u7684\u89e6\u53d1\u5668\u3002</p>"},{"location":"vivo-app-drawer/#2-call-the-dna-sdk-to-get-ads-for-slot-4-and-slot-8","title":"2. Call the DNA SDK to get ads for Slot 4 and Slot 8","text":"<p>2 \u8c03\u7528DNA SDK\u83b7\u53d6Slot 4\u548cSlot 8\u7684\u5e7f\u544a</p> <p>This method call will return a list of DNAResultItem objects which will be used for Slot 4 and Slot 8. It will return 2 total results which can be used for the 2 available slots.</p> <p>\u6b64\u65b9\u6cd5\u8c03\u7528\u5c06\u8fd4\u56de\u4e00\u7ec4 DNAResultItem \u5bf9\u8c61\uff0c\u7528\u4e8e Slot 4 \u548c Slot 8\u3002\u5b83\u5c06\u8fd4\u56de\u53ef\u7528\u4e8e 2 \u4e2a\u53ef\u7528\u69fd\u4f4d\u7684 2 \u4e2a\u603b\u7ed3\u679c\u3002</p> <pre><code>DeviceNativeAds dna = DeviceNativeAds.getInstance(getApplicationContext());\nList&lt;DNAResultItem&gt; adUnits = dna.getAdsForCache(2, \"app drawer, slot 4 and 8\");\n</code></pre>"},{"location":"vivo-app-drawer/#note","title":"Note","text":"<p>\u6ce8\u610f</p> <ol> <li>These are ordered by relevance and monetization potential, so the first ad will be the most relevant.<ul> <li>\u8fd9\u4e9b\u662f\u6839\u636e\u76f8\u5173\u6027\u548c\u8d27\u5e01\u5316\u6f5c\u529b\u6392\u5e8f\u7684\uff0c\u6240\u4ee5\u7b2c\u4e00\u4e2a\u5e7f\u544a\u662f\u6700\u76f8\u5173\u7684\u3002</li> </ul> </li> <li>This method return an ad in milliseconds, so it's safe to run on the main thread. <ul> <li>\u6b64\u65b9\u6cd5\u5728\u6beb\u79d2\u5185\u8fd4\u56de\u5e7f\u544a\uff0c\u56e0\u6b64\u53ef\u4ee5\u5728\u4e3b\u7ebf\u7a0b\u4e0a\u8fd0\u884c\u3002</li> </ul> </li> <li>This method does NOT assume that you will show the ads, and therefore will not fire impressions. You must fire impressions yourself with a separate call.<ul> <li>\u6b64\u65b9\u6cd5\u4e0d\u5047\u8bbe\u60a8\u4f1a\u663e\u793a\u5e7f\u544a\uff0c\u56e0\u6b64\u4e0d\u4f1a\u89e6\u53d1\u5c55\u793a\u3002\u60a8\u5fc5\u987b\u4f7f\u7528\u5355\u72ec\u7684\u8c03\u7528\u89e6\u53d1\u5c55\u793a\u3002</li> </ul> </li> </ol>"},{"location":"vivo-app-drawer/#key-fields-of-dnaresultitem-class","title":"Key Fields of DNAResultItem Class","text":"<p>DNAResultItem \u7c7b\u7684\u5173\u952e\u5b57\u6bb5</p> Parameter Description Translation <code>id</code> Unique identifier for the ad. Just a UUID for reference if you need \u5e7f\u544a\u7684\u552f\u4e00\u6807\u8bc6\u7b26\u3002\u5982\u679c\u9700\u8981,\u53ea\u662f\u4e00\u4e2a\u7528\u4e8e\u53c2\u8003\u7684UUID <code>packageName</code> The package name of the advertiser's app \u5e7f\u544a\u4e3b\u5e94\u7528\u7684\u5305\u540d <code>isInstalled</code> A convenient boolean indicating whether the advertiser's app is installed, derived from package manager \u4e00\u4e2a\u65b9\u4fbf\u7684\u5e03\u5c14\u503c,\u8868\u793a\u5e7f\u544a\u4e3b\u7684\u5e94\u7528\u662f\u5426\u5df2\u5b89\u88c5,\u4ece\u5305\u7ba1\u7406\u5668\u6d3e\u751f <code>appName</code> The name of the advertiser's app \u5e7f\u544a\u4e3b\u5e94\u7528\u7684\u540d\u79f0 <code>className</code> The class name of the activity to be shown to the user. Can be null! \u8981\u5411\u7528\u6237\u663e\u793a\u7684\u6d3b\u52a8\u7c7b\u540d\u3002\u53ef\u4ee5\u4e3a\u7a7a\uff01 <code>userHandle</code> The user handle of the app. Can be null! \u5e7f\u544a\u4e3b\u5e94\u7528\u7684\u7528\u6237\u53e5\u67c4\u3002\u53ef\u4ee5\u4e3a\u7a7a\uff01 <code>title</code> The ad creative title to be shown to the user \u8981\u5411\u7528\u6237\u663e\u793a\u7684\u5e7f\u544a\u521b\u610f\u6807\u9898 <code>description</code> The ad creative description to be shown to the user. Can be null! \u8981\u5411\u7528\u6237\u663e\u793a\u7684\u5e7f\u544a\u521b\u610f\u63cf\u8ff0\u3002\u53ef\u4ee5\u4e3a\u7a7a\uff01 <code>iconUrl</code> The ad creative icon URL to be shown to the user. Can be null! \u8981\u5411\u7528\u6237\u663e\u793a\u7684\u5e7f\u544a\u521b\u610f\u56fe\u6807URL\u3002\u53ef\u4ee5\u4e3a\u7a7a\uff01 <code>ratings</code> The number of ratings of the advertiser's app from Google Play \u5e7f\u544a\u4e3b\u5e94\u7528\u4eceGoogle Play\u7684\u8bc4\u5206\u6b21\u6570 <code>downloads</code> The number of downloads of the advertiser's app from Google Play \u5e7f\u544a\u4e3b\u5e94\u7528\u4eceGoogle Play\u7684\u4e0b\u8f7d\u6b21\u6570 <code>rating</code> The average rating of the advertiser's app from Google Play \u5e7f\u544a\u4e3b\u5e94\u7528\u4eceGoogle Play\u7684\u5e73\u5747\u8bc4\u5206 <code>eCPM</code> The expected revenue per thousand impressions for the ad unit. Note that this is not real when the <code>learningMode</code> is true \u5e7f\u544a\u5355\u5143\u7684\u9884\u671f\u6bcf\u5343\u6b21\u5c55\u793a\u6536\u5165\u3002\u6ce8\u610f\uff0c\u5f53 <code>learningMode</code> \u4e3a true \u65f6\uff0c\u8fd9\u4e0d\u662f\u771f\u5b9e\u7684 <code>learningMode</code> A boolean indicating whether the ad unit is in eCPM learning mode, and whether the eCPM number can be used. \u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u8868\u793a\u5e7f\u544a\u5355\u5143\u662f\u5426\u5904\u4e8e eCPM \u5b66\u4e60\u6a21\u5f0f\uff0c\u4ee5\u53ca\u662f\u5426\u53ef\u4ee5\u4f7f\u7528 eCPM \u6570\u5b57\u3002"},{"location":"vivo-app-drawer/#3-vivo-retrieves-its-own-recommended-apps-list","title":"3. vivo retrieves its own Recommended Apps list","text":"<p>3 vivo\u68c0\u7d22\u81ea\u5df1\u7684\u63a8\u8350\u5e94\u7528\u5217\u8868</p> <p>In this step, vivo will retrieve its own list of recommended apps. This is the code that currently powers the \"Recommended Apps\" section of the App Drawer app.</p> <p>\u5728\u6b64\u6b65\u9aa4\u4e2d\uff0cvivo\u5c06\u68c0\u7d22\u5176\u81ea\u5df1\u7684\u63a8\u8350\u5e94\u7528\u5217\u8868\u3002\u8fd9\u662f\u5f53\u524d\u4e3a App Drawer \u5e94\u7528\u7684\u201c\u63a8\u8350\u5e94\u7528\u201d\u90e8\u5206\u63d0\u4f9b\u52a8\u529b\u7684\u4ee3\u7801\u3002</p>"},{"location":"vivo-app-drawer/#4-deduplicate-dna-results-from-vivos-organic-results","title":"4. Deduplicate DNA results from vivo's organic results","text":"<p>4 \u4e3a3\u79cd\u573a\u666f\u62c6\u5206DNA\u7ed3\u679c</p> <p>vivo should prioritize the DNA results over its own organic results, and should therefore should find and remove all of the duplicate package names from their own results.</p> <p>vivo \u5e94\u8be5\u4f18\u5148\u8003\u8651 DNA \u7ed3\u679c\u800c\u4e0d\u662f\u5176\u81ea\u5df1\u7684\u6709\u673a\u7ed3\u679c\uff0c\u56e0\u6b64\u5e94\u8be5\u627e\u5230\u5e76\u5220\u9664\u5176\u7ed3\u679c\u4e2d\u7684\u6240\u6709\u91cd\u590d\u5305\u540d\u3002</p> <pre><code>function removeDuplicateResults(vivoResults, dnaResults):\n    # Create a set to store package names from DNA results for quick lookup\n    dnaPackageNames = set()\n\n    # Populate the set with package names from DNA results\n    for dnaResult in dnaResults:\n        dnaPackageNames.add(dnaResult.packageName)\n\n    # Create a new list to store non-duplicate vivo results\n    filteredVivoResults = []\n\n    # Iterate over vivo's results\n    for vivoResult in vivoResults:\n        # Check if the package name is not in the DNA package names set\n        if vivoResult.packageName not in dnaPackageNames:\n            # If not a duplicate, add to the filtered list\n            filteredVivoResults.append(vivoResult)\n\n    # Return the filtered list of vivo results\n    return filteredVivoResults \n</code></pre> <p>If there are fewer than 2 duplicates, then vivo should remove the lowest relevant results to make room for the 2 DNA results.</p> <p>\u5982\u679c\u5c11\u4e8e 2 \u4e2a\u91cd\u590d\u9879\uff0c\u5219 vivo \u5e94\u8be5\u5220\u9664\u6700\u4f4e\u76f8\u5173\u7684\u7ed3\u679c\u4ee5\u817e\u51fa\u7a7a\u95f4\u7ed9 2 \u4e2a DNA \u7ed3\u679c\u3002</p>"},{"location":"vivo-app-drawer/#5-load-ad-creative-in-the-ui","title":"5. Load ad creative in the UI","text":"<p>5 \u5728UI\u4e2d\u52a0\u8f7d\u5e7f\u544a\u521b\u610f</p> <p>Below shows an example implementation of loading the ad creative in the UI, with DNA method calls.</p> <p>\u4ee5\u4e0b\u663e\u793a\u4e86\u5728 UI \u4e2d\u52a0\u8f7d\u5e7f\u544a\u521b\u610f\u7684\u793a\u4f8b\u5b9e\u73b0\uff0c\u4f7f\u7528 DNA \u65b9\u6cd5\u8c03\u7528\u3002</p> <pre><code>ImageView itemIcon = itemView.findViewById(R.id.item_icon);\nTextView itemTitle = itemView.findViewById(R.id.item_title);\nTextView itemDescription = itemView.findViewById(R.id.item_description);\n\n// handle loading app icon async if app uninstalled\n// \u5982\u679c\u5e94\u7528\u672a\u5b89\u88c5\uff0c\u5f02\u6b65\u52a0\u8f7d\u5e94\u7528\u56fe\u6807\nif (!resultItem.isInstalled) {\n  resultItem.loadCreativeDrawableAsync(this, new DNAResultItem.ImageCallback() {\n    @Override\n    public void onImageLoaded(Drawable icon) {\n      new Thread(() -&gt; {\n        runOnUiThread(() -&gt; {\n          if (icon == null) {\n            try {\n              Drawable backupIcon = getPackageManager().getApplicationIcon(resultItem.packageName);\n              itemIcon.setImageDrawable(backupIcon);\n            } catch (Exception e) {\n              Log.e(\"SearchActivity\", \"Error loading app icon: \" + e.getMessage());\n            }\n          } else {\n            itemIcon.setImageDrawable(icon);\n          }\n        });\n      }).start();\n    }\n\n    @Override\n    public void onError(String message) {\n      try {\n        Drawable icon = getPackageManager().getApplicationIcon(resultItem.packageName);\n        itemIcon.setImageDrawable(icon);\n      } catch (Exception e) {\n        Log.e(\"SearchActivity\", \"Error loading app icon: \" + e.getMessage());\n      }\n    }\n  });\n\n  // Note, if convenient, there is a sync method to get the icon but not recommended for UI thread\n  // Drawable icon = resultItem.loadCreativeDrawable();\n  // \u6ce8\u610f\uff0c\u5982\u679c\u65b9\u4fbf\u7684\u8bdd\uff0c\u6709\u4e00\u4e2a\u540c\u6b65\u65b9\u6cd5\u53ef\u4ee5\u83b7\u53d6\u56fe\u6807\uff0c\u4f46\u4e0d\u5efa\u8bae\u5728UI\u7ebf\u7a0b\u4e2d\u4f7f\u7528\n  // Drawable icon = resultItem.loadCreativeDrawable();\n} else {\n  // if app is installed, show the app icon\n  // \u5982\u679c\u5e94\u7528\u5df2\u5b89\u88c5\uff0c\u663e\u793a\u5e94\u7528\u56fe\u6807\n  Drawable icon = getPackageManager().getApplicationIcon(resultItem.packageName);\n  itemIcon.setImageDrawable(icon);\n}\n\nitemTitle.setText(resultItem.title);\n</code></pre>"},{"location":"vivo-app-drawer/#6-fire-impressions-for-the-ads","title":"6. Fire impressions for the ads","text":"<p>6 \u4f7f\u7528\u65b0\u7684\u4f4d\u7f6e\u6807\u7b7e\u4e3a\u5e7f\u544a\u89e6\u53d1\u5c55\u793a</p> <p>It is important that you fire impressions for the ads when they are shown to the user. This is how DNA tracks the performance of the ads, but also manages frequency caps, targeting and many other functions.</p> <p>\u5f53\u5411\u7528\u6237\u663e\u793a\u5e7f\u544a\u65f6\uff0c\u91cd\u8981\u7684\u662f\u89e6\u53d1\u5c55\u793a\u3002\u8fd9\u662f DNA \u8ddf\u8e2a\u5e7f\u544a\u6027\u80fd\u7684\u65b9\u5f0f\uff0c\u4f46\u4e5f\u7ba1\u7406\u9891\u7387\u4e0a\u9650\u3001\u5b9a\u4f4d\u548c\u8bb8\u591a\u5176\u4ed6\u529f\u80fd\u3002</p> <pre><code>DeviceNativeAds dna = DeviceNativeAds.getInstance(getApplicationContext());\ndna.fireImpressions(dnaResultsShown);\n</code></pre>"},{"location":"vivo-app-drawer/#7-send-user-click-to-dna-for-routing","title":"7. Send user click to DNA for routing","text":"<p>7 \u5c06\u7528\u6237\u70b9\u51fb\u53d1\u9001\u7ed9DNA\u8fdb\u884c\u8def\u7531</p> <p>After the user clicks on a DNA result, vivo will send the click to DNA for routing. DNA should handle the click routing because it is important to deep link the user to the advertiser's app with the appropriate parameters.</p> <p>\u7528\u6237\u70b9\u51fb DNA \u7ed3\u679c\u540e\uff0cvivo \u5c06\u70b9\u51fb\u53d1\u9001\u7ed9 DNA \u8fdb\u884c\u8def\u7531\u3002DNA \u5e94\u8be5\u5904\u7406\u70b9\u51fb\u8def\u7531\uff0c\u56e0\u4e3a\u91cd\u8981\u7684\u662f\u4f7f\u7528\u9002\u5f53\u7684\u53c2\u6570\u5c06\u7528\u6237\u6df1\u5ea6\u94fe\u63a5\u5230\u5e7f\u544a\u4e3b\u7684\u5e94\u7528\u3002</p> <pre><code>DeviceNativeAds dna = DeviceNativeAds.getInstance(getApplicationContext());\nDeviceNativeAds.getInstance(this).fireClickAndRoute(resultItem,  new DeviceNativeClickHandler() {\n  @Override\n  public void onClickServerCompleted() {\n    Log.i(\"GlobalSearchActivity\", \"Click tracking completed successfully.\");\n  }\n\n  @Override\n  public void onClickRouterCompleted(boolean didRoute) {\n    if (!didRoute) {\n      Log.e(\"GlobalSearchActivity\", \"Error routing click: No activity found to handle the click.\");\n    } else {\n      Log.i(\"GlobalSearchActivity\", \"Click routed successfully.\");\n    }\n  }\n\n  @Override\n  public void onFailure(int errorCode, String errorMessage) {\n    Log.e(\"GlobalSearchActivity\", \"Error clicking ad: \" + errorMessage);\n  }\n});\n</code></pre>"},{"location":"vivo-app-drawer/#important-click-handling-notes","title":"Important click handling notes","text":"<p>\u91cd\u8981\u7684\u70b9\u51fb\u5904\u7406\u6ce8\u610f\u4e8b\u9879</p> <ol> <li>Make sure to handle the failure cases, such as no activity found to handle the click, and errors in the click tracking and routing. This should be very rare, but it's important to handle it gracefully.<ul> <li>\u786e\u4fdd\u5904\u7406\u6545\u969c\u60c5\u51b5\uff0c\u4f8b\u5982\u6ca1\u6709\u6d3b\u52a8\u53ef\u4ee5\u5904\u7406\u70b9\u51fb\uff0c\u4ee5\u53ca\u70b9\u51fb\u8ddf\u8e2a\u548c\u8def\u7531\u4e2d\u7684\u9519\u8bef\u3002\u8fd9\u79cd\u60c5\u51b5\u5e94\u8be5\u5f88\u5c11\u89c1\uff0c\u4f46\u91cd\u8981\u7684\u662f\u8981\u4f18\u96c5\u5730\u5904\u7406\u5b83\u3002</li> </ul> </li> </ol>"},{"location":"vivo-app-drawer/#8-do-not-cache-the-results","title":"8. Do not cache the results","text":"<p>8 \u4e0d\u8981\u7f13\u5b58\u7ed3\u679c</p> <p>Fresh ad retrieval is very low latency and not resource intensive, so there is no need to cache the results. Results can be become stale very quickly, and it's important that the user sees the most relevant results for optimum CPM.</p> <p>\u65b0\u9c9c\u7684\u5e7f\u544a\u68c0\u7d22\u5ef6\u8fdf\u975e\u5e38\u4f4e\uff0c\u4e0d\u5360\u7528\u8d44\u6e90\uff0c\u56e0\u6b64\u65e0\u9700\u7f13\u5b58\u7ed3\u679c\u3002\u7ed3\u679c\u53ef\u80fd\u4f1a\u5f88\u5feb\u53d8\u5f97\u8fc7\u65f6\uff0c\u7528\u6237\u770b\u5230\u6700\u76f8\u5173\u7684\u7ed3\u679c\u5bf9\u4e8e\u6700\u4f73 CPM \u81f3\u5173\u91cd\u8981\u3002</p>"},{"location":"vivo-global-search/","title":"DNA - vivo Integration Proposals","text":"<p>Date: 2025-02-04</p> <p>Below are the proposed integration steps to accommodate vivo's Global Search integration product spec.</p> <ol> <li>DNA SDK Integration</li> <li>GS Recommended Apps Integration<ol> <li>User opens Global Search app</li> <li>Call the DNA SDK to get ALL recommended apps</li> <li>vivo retrieves its own Recommended Apps list</li> <li>Split out the DNA results for the 3 scenarios</li> <li>Load ad creative in the UI</li> <li>Fire impressions for the ads with the new placement tag</li> <li>Send user click to DNA for routing</li> </ol> </li> <li>GS Search Integration<ol> <li>User enters character in search bar</li> <li>Call the DNA SDK to get ALL search results</li> <li>Split out the DNA results for the 2 scenarios</li> <li>Show all scenario 5 results from DNA</li> <li>Register impressions for all visible Scenario 5 results</li> <li>Mix scenario 6 results with vivo organic results</li> <li>Fire impressions for all visible Scenario 6 results</li> <li>Load ad creative in the UI for either scenario</li> <li>Send user click to DNA for routing for either scenario</li> </ol> </li> </ol> <p>\u4ee5\u4e0b\u662f\u9002\u5e94vivo\u5168\u5c40\u641c\u7d22\u96c6\u6210\u4ea7\u54c1\u89c4\u683c\u7684\u5efa\u8bae\u96c6\u6210\u6b65\u9aa4\u3002</p> <ol> <li>DNA SDK\u96c6\u6210</li> <li>GS\u63a8\u8350\u5e94\u7528\u96c6\u6210<ol> <li>\u7528\u6237\u6253\u5f00\u5168\u5c40\u641c\u7d22\u5e94\u7528</li> <li>\u8c03\u7528DNA SDK\u83b7\u53d6\u6240\u6709\u63a8\u8350\u5e94\u7528</li> <li>vivo\u68c0\u7d22\u81ea\u5df1\u7684\u63a8\u8350\u5e94\u7528\u5217\u8868</li> <li>\u4e3a3\u79cd\u573a\u666f\u62c6\u5206DNA\u7ed3\u679c</li> <li>\u5728UI\u4e2d\u52a0\u8f7d\u5e7f\u544a\u521b\u610f</li> <li>\u4f7f\u7528\u65b0\u7684\u4f4d\u7f6e\u6807\u7b7e\u4e3a\u5e7f\u544a\u89e6\u53d1\u5c55\u793a</li> <li>\u5c06\u7528\u6237\u70b9\u51fb\u53d1\u9001\u7ed9DNA\u8fdb\u884c\u8def\u7531</li> </ol> </li> <li>GS\u641c\u7d22\u96c6\u6210<ol> <li>\u7528\u6237\u5728\u641c\u7d22\u680f\u4e2d\u8f93\u5165\u5b57\u7b26</li> <li>\u8c03\u7528DNA SDK\u83b7\u53d6\u6240\u6709\u641c\u7d22\u7ed3\u679c</li> <li>\u4e3a2\u79cd\u573a\u666f\u62c6\u5206DNA\u7ed3\u679c</li> <li>\u663e\u793aDNA\u7684\u6240\u6709\u573a\u666f5\u7ed3\u679c</li> <li>\u4e3a\u6240\u6709\u53ef\u89c1\u7684\u573a\u666f5\u7ed3\u679c\u6ce8\u518c\u5c55\u793a</li> <li>\u5c06\u573a\u666f6\u7ed3\u679c\u4e0evivo\u6709\u673a\u7ed3\u679c\u6df7\u5408</li> <li>\u4e3a\u6240\u6709\u53ef\u89c1\u7684\u573a\u666f6\u7ed3\u679c\u6ce8\u518c\u5c55\u793a</li> <li>\u5728UI\u4e2d\u52a0\u8f7d\u5e7f\u544a\u521b\u610f</li> <li>\u4e3a\u4efb\u4e00\u573a\u666f\u5c06\u7528\u6237\u70b9\u51fb\u53d1\u9001\u7ed9DNA\u8fdb\u884c\u8def\u7531</li> </ol> </li> </ol>"},{"location":"vivo-global-search/#dna-sdk-integration","title":"DNA SDK Integration","text":"<p>DNA SDK \u96c6\u6210</p> <p>See vivo-sdk-changelog for release details.</p>"},{"location":"vivo-global-search/#1-add-aar-dependency","title":"1. Add AAR Dependency","text":"<p>1 \u6dfb\u52a0 AAR \u4f9d\u8d56</p> <p>The DeviceNativeAds SDK is distributed as an AAR file. Follow the instructions below to install it. DeviceNativeAds SDK \u4ee5 AAR \u6587\u4ef6\u7684\u5f62\u5f0f\u5206\u53d1\u3002\u8bf7\u6309\u7167\u4ee5\u4e0b\u8bf4\u660e\u8fdb\u884c\u5b89\u88c5\u3002</p>"},{"location":"vivo-global-search/#11-download-the-aar-file","title":"1.1. Download the AAR File","text":"<p>1.1. \u4e0b\u8f7d AAR \u6587\u4ef6</p> <p>You can find the latest AAR hosted here: https://dna-hosting.s3.amazonaws.com/public/com.devicenative.dna-vivo-v1.2.1.aar</p>"},{"location":"vivo-global-search/#12-place-the-aar-file-in-your-project","title":"1.2 Place the AAR File in your Project","text":"<p>1.2 \u5c06 AAR \u6587\u4ef6\u653e\u7f6e\u5728\u60a8\u7684\u9879\u76ee\u4e2d</p> <p>Place the DeviceNativeAds SDK in the <code>libs</code> folder of your Android project. If you don't have a <code>libs</code> folder, create one. It should be placed in the same folder as your <code>src</code> folder like so:</p> <p>\u5c06 DeviceNativeAds SDK \u653e\u5728 Android \u9879\u76ee\u7684 <code>libs</code> \u6587\u4ef6\u5939\u4e2d\u3002\u5982\u679c\u60a8\u6ca1\u6709 <code>libs</code> \u6587\u4ef6\u5939\uff0c\u8bf7\u521b\u5efa\u4e00\u4e2a\u3002\u5b83\u5e94\u8be5\u4e0e\u60a8\u7684 <code>src</code> \u6587\u4ef6\u5939\u653e\u5728\u540c\u4e00\u76ee\u5f55\u4e0b\uff0c\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>project-folder/src/main/java/com/example/project/MainActivity.java\nproject-folder/libs/com.devicenative.dna-vivo-v1.2.1.aar\n</code></pre>"},{"location":"vivo-global-search/#13-add-the-aar-dependency","title":"1.3 Add the AAR Dependency","text":"<p>1.3 \u6dfb\u52a0 AAR \u4f9d\u8d56</p> <p>Add the following dependency to your app's <code>build.gradle</code> file:</p> <p>\u5c06\u4ee5\u4e0b\u4f9d\u8d56\u9879\u6dfb\u52a0\u5230\u60a8\u5e94\u7528\u7684 <code>build.gradle</code> \u6587\u4ef6\u4e2d\uff1a</p> <pre><code>dependencies {\n    implementation files('libs/com.devicenative.dna-vivo-v1.2.1.aar')\n}\n</code></pre> <p>or some Gradle versions:</p> <p>\u6216\u8005\u5bf9\u4e8e\u67d0\u4e9b Gradle \u7248\u672c\uff1a</p> <pre><code>dependencies {\n    implementation(files('libs/com.devicenative.dna-vivo-v1.2.1.aar'))\n}\n</code></pre>"},{"location":"vivo-global-search/#2-register-the-data-orchestrator-service","title":"2. Register the Data Orchestrator Service","text":"<p>2 \u6ce8\u518c\u6570\u636e\u7f16\u6392\u670d\u52a1</p> <p>In your AndroidManifest.xml, register the DNADataOrchestrator service and the DNAConfigBuilder service. The DNADataOrchestrator is the main service which coordinates data fetching and processing to deliver fresh advertising results. It will run in your application's process and persist. The DNAConfigBuilder is a one-time use service which runs in a separate process to retrieve the user agent for the device. It will run for approximately 1 second at startup, and not again.</p> <p>\u5728\u60a8\u7684 AndroidManifest.xml \u4e2d\uff0c\u6ce8\u518c DNADataOrchestrator \u670d\u52a1\u548c DNAConfigBuilder \u670d\u52a1\u3002DNADataOrchestrator \u662f\u4e3b\u8981\u670d\u52a1\uff0c\u534f\u8c03\u6570\u636e\u83b7\u53d6\u548c\u5904\u7406\u4ee5\u4ea4\u4ed8\u65b0\u9c9c\u5e7f\u544a\u7ed3\u679c\u3002\u5b83\u5c06\u5728\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u8fdb\u7a0b\u4e2d\u8fd0\u884c\u5e76\u6301\u7eed\u5b58\u5728\u3002DNAConfigBuilder \u662f\u4e00\u6b21\u6027\u670d\u52a1\uff0c\u5728\u5355\u72ec\u7684\u8fdb\u7a0b\u4e2d\u8fd0\u884c\u4ee5\u68c0\u7d22\u8bbe\u5907\u7684 user agent\u3002\u5b83\u5c06\u5728\u542f\u52a8\u65f6\u8fd0\u884c\u7ea6 1 \u79d2\u949f\uff0c\u4e0d\u518d\u8fd0\u884c\u3002</p> <pre><code>&lt;service android:name=\"com.devicenative.dna.DNADataOrchestrator\" /&gt;\n&lt;service\n    android:name=\"com.devicenative.dna.utils.DNAConfigBuilder\"\n    android:process=\":dna_config_builder\"\n    android:exported=\"false\"/&gt;\n</code></pre>"},{"location":"vivo-global-search/#3-verify-required-permissions","title":"3. Verify Required Permissions","text":"<p>3 \u9a8c\u8bc1\u6240\u9700\u6743\u9650</p> <p>Make sure to include the following permissions in your AndroidManifest.xml:</p> <p>\u8bf7\u786e\u4fdd\u5728\u60a8\u7684 AndroidManifest.xml \u4e2d\u5305\u542b\u4ee5\u4e0b\u6743\u9650\uff1a</p> <pre><code>&lt;uses-permission android:name=\"android.permission.INTERNET\" /&gt;\n&lt;uses-permission android:name=\"android.permission.QUERY_ALL_PACKAGES\"/&gt;\n&lt;uses-permission android:name=\"android.permission.PACKAGE_USAGE_STATS\"/&gt;\n</code></pre>"},{"location":"vivo-global-search/#4-initialize-dna-sdk","title":"4. Initialize DNA SDK","text":"<p>4 \u521d\u59cb\u5316 DNA SDK</p> <p>Initialize the SDK in your Application class's <code>onCreate</code> method:</p> <p>\u5728\u60a8\u7684 Application \u7c7b\u7684 <code>onCreate</code> \u65b9\u6cd5\u4e2d\u521d\u59cb\u5316 SDK\uff1a</p> <pre><code>@Override\npublic void onCreate() {\n    super.onCreate();\n\n    DeviceNativeAds dna = DeviceNativeAds.getInstance(this);\n    dna.init(\"da01177b-1526-4b81-9b9d-4a24e54674ac\");\n\n    // any other code you have\n}\n</code></pre>"},{"location":"vivo-global-search/#7-clean-up-dna-resources","title":"7. Clean Up DNA Resources","text":"<ol> <li>\u6e05\u7406 DNA \u8d44\u6e90</li> </ol> <p>In the Application class's <code>onTerminate</code> method, clean up SDK resources:</p> <p>\u5728 Application \u7c7b\u7684 <code>onTerminate</code> \u65b9\u6cd5\u4e2d\uff0c\u6e05\u7406 SDK \u8d44\u6e90\uff1a</p> <pre><code>@Override\npublic void onTerminate() {\n    super.onTerminate();\n\n    DeviceNativeAds dna = DeviceNativeAds.getInstance(this);\n    dna.destroy();\n\n    // any other code you have\n}\n</code></pre>"},{"location":"vivo-global-search/#gs-recommended-apps-integration","title":"GS Recommended Apps Integration","text":"<p>GS \u63a8\u8350\u5e94\u7528\u96c6\u6210</p>"},{"location":"vivo-global-search/#introduction","title":"Introduction","text":"<p>\u4ecb\u7ecd</p> <p>This section of the documentation will describe the technical integration for the following integration scenarios:</p> <p>\u672c\u6587\u6863\u90e8\u5206\u5c06\u63cf\u8ff0\u4ee5\u4e0b\u96c6\u6210\u573a\u666f\u7684\u6280\u672f\u96c6\u6210\uff1a</p> <ol> <li>Scenario 1: Recommended Apps Slot 3 and 8, CPC<ul> <li>\u573a\u666f1\uff1a\u63a8\u8350\u5e94\u7528\u4f4d\u7f6e3\u548c8\uff0cCPC</li> </ul> </li> <li>Scenario 2: Recommended Apps Slot 4 and 9, CPC/CPA<ul> <li>\u573a\u666f2\uff1a\u63a8\u8350\u5e94\u7528\u4f4d\u7f6e4\u548c9\uff0cCPC/CPA</li> </ul> </li> <li>Scenario 3: Recommended Apps Slot 5 and 10, CPA<ul> <li>\u573a\u666f3\uff1a\u63a8\u8350\u5e94\u7528\u4f4d\u7f6e5\u548c10\uff0cCPA</li> </ul> </li> </ol> <p>It is important to understand that DNA returns ALL suggestions (re-engagement and install) in a single SDK function call. Vivo will make this function call, and then parse out the results to display in the different scenarios. DNA can assist in writing this logic for vivo.</p> <p>\u91cd\u8981\u7684\u662f\u8981\u7406\u89e3\uff0cDNA\u5728\u5355\u4e2aSDK\u51fd\u6570\u8c03\u7528\u4e2d\u8fd4\u56de\u6240\u6709\u5efa\u8bae\uff08\u91cd\u65b0\u53c2\u4e0e\u548c\u5b89\u88c5\uff09\u3002vivo\u5c06\u8fdb\u884c\u6b64\u51fd\u6570\u8c03\u7528\uff0c\u7136\u540e\u89e3\u6790\u7ed3\u679c\u4ee5\u5728\u4e0d\u540c\u573a\u666f\u4e2d\u663e\u793a\u3002DNA\u53ef\u4ee5\u534f\u52a9vivo\u7f16\u5199\u6b64\u903b\u8f91\u3002</p>"},{"location":"vivo-global-search/#1-user-opens-global-search-app","title":"1: User opens Global Search app","text":"<ol> <li>\u7528\u6237\u6253\u5f00\u5168\u5c40\u641c\u7d22\u5e94\u7528</li> </ol> <p>Adding this step to indicate that the user has opened the Global Search app, which is the trigger for the following logic.</p> <p>\u6dfb\u52a0\u6b64\u6b65\u9aa4\u4ee5\u8868\u660e\u7528\u6237\u5df2\u6253\u5f00\u5168\u5c40\u641c\u7d22\u5e94\u7528\uff0c\u8fd9\u662f\u4ee5\u4e0b\u903b\u8f91\u7684\u89e6\u53d1\u5668\u3002</p>"},{"location":"vivo-global-search/#2-call-the-dna-sdk-to-get-all-recommended-apps","title":"2. Call the DNA SDK to get ALL recommended apps","text":"<p>2 \u8c03\u7528DNA SDK\u83b7\u53d6\u6240\u6709\u63a8\u8350\u5e94\u7528</p> <p>This method call will return a list of DNAResultItem objects which will be used for Scenario 1, 2, and 3. It will return 6 total results which can be used for the 6 available slots.</p> <p>\u6b64\u65b9\u6cd5\u8c03\u7528\u5c06\u8fd4\u56de\u4e00\u7ec4 DNAResultItem \u5bf9\u8c61\uff0c\u7528\u4e8e\u573a\u666f1\u30012\u548c3\u3002\u5b83\u5c06\u8fd4\u56de\u53ef\u7528\u4e8e 6 \u4e2a\u53ef\u7528\u69fd\u4f4d\u7684 6 \u4e2a\u603b\u7ed3\u679c\u3002</p> <pre><code>DeviceNativeAds dna = DeviceNativeAds.getInstance(getApplicationContext());\nList&lt;DNAResultItem&gt; adUnits = dna.getAdsForCache(6, \"gs, recommended apps\");\n</code></pre>"},{"location":"vivo-global-search/#note","title":"Note","text":"<p>\u6ce8\u610f</p> <ol> <li>These are ordered by relevance and monetization potential, so the first ad will be the most relevant.<ul> <li>\u8fd9\u4e9b\u662f\u6839\u636e\u76f8\u5173\u6027\u548c\u8d27\u5e01\u5316\u6f5c\u529b\u6392\u5e8f\u7684\uff0c\u6240\u4ee5\u7b2c\u4e00\u4e2a\u5e7f\u544a\u662f\u6700\u76f8\u5173\u7684\u3002</li> </ul> </li> <li>This method return an ad in milliseconds, so it's safe to run on the main thread. <ul> <li>\u6b64\u65b9\u6cd5\u5728\u6beb\u79d2\u5185\u8fd4\u56de\u5e7f\u544a\uff0c\u56e0\u6b64\u53ef\u4ee5\u5728\u4e3b\u7ebf\u7a0b\u4e0a\u8fd0\u884c\u3002</li> </ul> </li> <li>This method does NOT assume that you will show the ads, and therefore will not fire impressions. You must fire impressions yourself with a separate call.<ul> <li>\u6b64\u65b9\u6cd5\u4e0d\u5047\u8bbe\u60a8\u4f1a\u663e\u793a\u5e7f\u544a\uff0c\u56e0\u6b64\u4e0d\u4f1a\u89e6\u53d1\u5c55\u793a\u3002\u60a8\u5fc5\u987b\u4f7f\u7528\u5355\u72ec\u7684\u8c03\u7528\u89e6\u53d1\u5c55\u793a\u3002</li> </ul> </li> <li>The placement tag \"global search recommended apps\" is used to identify the request for the ads, but you will separately tag the ads later with a new placement tag when registering impressions.<ul> <li>\u4f7f\u7528 placement tag \"global search recommended apps\" \u6765\u8bc6\u522b\u5e7f\u544a\u8bf7\u6c42\uff0c\u4f46\u60a8\u7a0d\u540e\u4f1a\u4f7f\u7528\u65b0\u7684 placement tag \u6ce8\u518c\u5e7f\u544a\u65f6\uff0c\u4f1a\u5206\u522b\u6807\u8bb0\u5e7f\u544a\u3002</li> </ul> </li> <li>You can separate re-engagement and install ads using the boolean <code>isInstalled</code> field.<ul> <li>\u60a8\u53ef\u4ee5\u4f7f\u7528\u5e03\u5c14\u503c <code>isInstalled</code> \u5b57\u6bb5\u6765\u533a\u5206\u91cd\u65b0\u53c2\u4e0e\u548c\u5b89\u88c5\u5e7f\u544a\u3002</li> </ul> </li> </ol>"},{"location":"vivo-global-search/#key-fields-of-dnaresultitem-class","title":"Key Fields of DNAResultItem Class","text":"Parameter Description Translation <code>id</code> Unique identifier for the ad. Just a UUID for reference if you need \u5e7f\u544a\u7684\u552f\u4e00\u6807\u8bc6\u7b26\u3002\u5982\u679c\u9700\u8981,\u53ea\u662f\u4e00\u4e2a\u7528\u4e8e\u53c2\u8003\u7684UUID <code>packageName</code> The package name of the advertiser's app \u5e7f\u544a\u4e3b\u5e94\u7528\u7684\u5305\u540d <code>isInstalled</code> A convenient boolean indicating whether the advertiser's app is installed, derived from package manager \u4e00\u4e2a\u65b9\u4fbf\u7684\u5e03\u5c14\u503c,\u8868\u793a\u5e7f\u544a\u4e3b\u7684\u5e94\u7528\u662f\u5426\u5df2\u5b89\u88c5,\u4ece\u5305\u7ba1\u7406\u5668\u6d3e\u751f <code>appName</code> The name of the advertiser's app \u5e7f\u544a\u4e3b\u5e94\u7528\u7684\u540d\u79f0 <code>className</code> The class name of the activity to be shown to the user. Can be null! \u8981\u5411\u7528\u6237\u663e\u793a\u7684\u6d3b\u52a8\u7c7b\u540d\u3002\u53ef\u4ee5\u4e3a\u7a7a\uff01 <code>userHandle</code> The user handle of the app. Can be null! \u5e7f\u544a\u4e3b\u5e94\u7528\u7684\u7528\u6237\u53e5\u67c4\u3002\u53ef\u4ee5\u4e3a\u7a7a\uff01 <code>title</code> The ad creative title to be shown to the user \u8981\u5411\u7528\u6237\u663e\u793a\u7684\u5e7f\u544a\u521b\u610f\u6807\u9898 <code>description</code> The ad creative description to be shown to the user. Can be null! \u8981\u5411\u7528\u6237\u663e\u793a\u7684\u5e7f\u544a\u521b\u610f\u63cf\u8ff0\u3002\u53ef\u4ee5\u4e3a\u7a7a\uff01 <code>iconUrl</code> The ad creative icon URL to be shown to the user. Can be null! \u8981\u5411\u7528\u6237\u663e\u793a\u7684\u5e7f\u544a\u521b\u610f\u56fe\u6807URL\u3002\u53ef\u4ee5\u4e3a\u7a7a\uff01 <code>ratings</code> The number of ratings of the advertiser's app from Google Play \u5e7f\u544a\u4e3b\u5e94\u7528\u4eceGoogle Play\u7684\u8bc4\u5206\u6b21\u6570 <code>downloads</code> The number of downloads of the advertiser's app from Google Play \u5e7f\u544a\u4e3b\u5e94\u7528\u4eceGoogle Play\u7684\u4e0b\u8f7d\u6b21\u6570 <code>rating</code> The average rating of the advertiser's app from Google Play \u5e7f\u544a\u4e3b\u5e94\u7528\u4eceGoogle Play\u7684\u5e73\u5747\u8bc4\u5206 <code>eCPM</code> The expected revenue per thousand impressions for the ad unit. Note that this is not real when the <code>learningMode</code> is true \u5e7f\u544a\u5355\u5143\u7684\u9884\u671f\u6bcf\u5343\u6b21\u5c55\u793a\u6536\u5165\u3002\u6ce8\u610f\uff0c\u5f53 <code>learningMode</code> \u4e3a true \u65f6\uff0c\u8fd9\u4e0d\u662f\u771f\u5b9e\u7684 <code>learningMode</code> A boolean indicating whether the ad unit is in eCPM learning mode, and whether the eCPM number can be used. \u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u8868\u793a\u5e7f\u544a\u5355\u5143\u662f\u5426\u5904\u4e8e eCPM \u5b66\u4e60\u6a21\u5f0f\uff0c\u4ee5\u53ca\u662f\u5426\u53ef\u4ee5\u4f7f\u7528 eCPM \u6570\u5b57\u3002"},{"location":"vivo-global-search/#3-vivo-retrieves-its-own-recommended-apps-list","title":"3. vivo retrieves its own Recommended Apps list","text":"<p>3 vivo\u68c0\u7d22\u81ea\u5df1\u7684\u63a8\u8350\u5e94\u7528\u5217\u8868</p> <p>In this step, vivo will retrieve its own list of recommended apps. This is the code that currently powers the \"Recommended Apps\" section of the Global Search app.</p> <p>\u5728\u6b64\u6b65\u9aa4\u4e2d\uff0cvivo\u5c06\u68c0\u7d22\u5176\u81ea\u5df1\u7684\u63a8\u8350\u5e94\u7528\u5217\u8868\u3002\u8fd9\u662f\u5f53\u524d\u4e3a\u5168\u5c40\u641c\u7d22\u5e94\u7528\u7684\u201c\u63a8\u8350\u5e94\u7528\u201d\u90e8\u5206\u63d0\u4f9b\u52a8\u529b\u7684\u4ee3\u7801\u3002</p>"},{"location":"vivo-global-search/#4-split-out-the-dna-results-for-the-3-scenarios","title":"4. Split out the DNA results for the 3 scenarios","text":"<p>4 \u4e3a3\u79cd\u573a\u666f\u62c6\u5206DNA\u7ed3\u679c</p> <p>As mentioned above, all of the results for the 3 scenarios are in the list of DNAResultItem objects returned from step 2. You will need to parse out the results for each scenario.</p> <p>\u5982\u4e0a\u6240\u8ff0\uff0c\u6240\u6709 3 \u79cd\u573a\u666f\u7684\u7ed3\u679c\u90fd\u5728\u4ece\u7b2c 2 \u6b65\u8fd4\u56de\u7684 DNAResultItem \u5bf9\u8c61\u5217\u8868\u4e2d\u3002\u60a8\u9700\u8981\u89e3\u6790\u6bcf\u4e2a\u573a\u666f\u7684\u7ed3\u679c\u3002</p> <pre><code>List&lt;DNAResultItem&gt; scenario1Ads = new ArrayList&lt;&gt;(); // Scenario 1: Recommended Apps, slot 3 and 8, CPC \nList&lt;DNAResultItem&gt; scenario2Ads = new ArrayList&lt;&gt;(); // Scenario 2: Recommended Apps, slot 4 and 9, CPC+ CPA\nList&lt;DNAResultItem&gt; scenario3Ads = new ArrayList&lt;&gt;(); // Scenario 3: Recommended Apps, slot 5 and 10, CPA\n\n// Note this is a reference to adUnits from step 2\n// \u6ce8\u610f\uff0c\u8fd9\u662f\u4ece\u7b2c 2 \u6b65\u7684 adUnits \u7684\u5f15\u7528\nfor (DNAResultItem resultItem : adUnits) {\n  if (resultItem.isInstalled) {\n    boolean willInsert = false;\n    // Candidate for Scenario 1 or 2\n    // \u5019\u9009\u573a\u666f1\u62162\n    if (scenario1Ads.size() == 0) {\n      willInsert = true;\n      scenario1Ads.add(resultItem);\n    } else if (scenario2Ads.size() == 0) {\n      willInsert = true;\n      scenario2Ads.add(resultItem);\n    } else if (scenario1Ads.size() == 1) {\n      willInsert = true;\n      scenario1Ads.add(resultItem);\n    } else if (scenario2Ads.size() == 1) {\n      willInsert = true;\n      scenario2Ads.add(resultItem);\n    }\n\n    if (willInsert) {\n      // You should remove the app from the original vivo organic to prevent duplicates\n      // This function would be implemented by vivo elsewhere\n      // \u5982\u679c\u5b58\u5728\uff0c\u4ece vivo \u7684\u6709\u673a\u7ed3\u679c\u4e2d\u5220\u9664\u8be5\u5e94\u7528\n      // vivo \u4f1a\u5728\u5176\u4ed6\u5730\u65b9\u5b9e\u73b0\u6b64\u529f\u80fd\n      removeFromOrganicVivoResultsIfPresent(resultItem.packageName);\n    }\n  } else {\n    // Candidate for Scenario 3\n    // \u5019\u9009\u573a\u666f3\n    if (scenario2Ads.size() == 0) {\n      scenario2Ads.add(resultItem);\n    } else if (scenario3Ads.size() == 0) {\n      scenario3Ads.add(resultItem);\n    } else if (scenario2Ads.size() == 1) {\n      scenario2Ads.add(resultItem);\n    } else if (scenario3Ads.size() == 1) {\n      scenario3Ads.add(resultItem);\n    }\n  }\n}\n</code></pre> <p>After parsing out the DNA results, you will have 3 lists of DNAResultItem objects, one for each scenario. You will then need to backfill if any of the slots are empty from vivo's organic results.</p> <p>\u89e3\u6790 DNA \u7ed3\u679c\u540e\uff0c\u60a8\u5c06\u83b7\u5f97 3 \u4e2a DNAResultItem \u5bf9\u8c61\u5217\u8868\uff0c\u6bcf\u4e2a\u573a\u666f\u4e00\u4e2a\u3002\u7136\u540e\uff0c\u5982\u679c\u4efb\u4f55\u69fd\u4e3a\u7a7a\uff0c\u60a8\u5c06\u9700\u8981\u4ece vivo \u7684\u6709\u673a\u7ed3\u679c\u4e2d\u8fdb\u884c\u56de\u586b\u3002</p>"},{"location":"vivo-global-search/#5-load-ad-creative-in-the-ui","title":"5. Load ad creative in the UI","text":"<p>5 \u5728UI\u4e2d\u52a0\u8f7d\u5e7f\u544a\u521b\u610f</p> <p>Below shows an example implementation of loading the ad creative in the UI, with DNA method calls.</p> <p>\u4ee5\u4e0b\u663e\u793a\u4e86\u5728 UI \u4e2d\u52a0\u8f7d\u5e7f\u544a\u521b\u610f\u7684\u793a\u4f8b\u5b9e\u73b0\uff0c\u4f7f\u7528 DNA \u65b9\u6cd5\u8c03\u7528\u3002</p> <pre><code>ImageView itemIcon = itemView.findViewById(R.id.item_icon);\nTextView itemTitle = itemView.findViewById(R.id.item_title);\nTextView itemDescription = itemView.findViewById(R.id.item_description);\n\n// handle loading app icon async if app uninstalled\n// \u5982\u679c\u5e94\u7528\u672a\u5b89\u88c5\uff0c\u5f02\u6b65\u52a0\u8f7d\u5e94\u7528\u56fe\u6807\nif (!resultItem.isInstalled) {\n  resultItem.loadCreativeDrawableAsync(this, new DNAResultItem.ImageCallback() {\n    @Override\n    public void onImageLoaded(Drawable icon) {\n      new Thread(() -&gt; {\n        runOnUiThread(() -&gt; {\n          if (icon == null) {\n            try {\n              Drawable backupIcon = getPackageManager().getApplicationIcon(resultItem.packageName);\n              itemIcon.setImageDrawable(backupIcon);\n            } catch (Exception e) {\n              Log.e(\"SearchActivity\", \"Error loading app icon: \" + e.getMessage());\n            }\n          } else {\n            itemIcon.setImageDrawable(icon);\n          }\n        });\n      }).start();\n    }\n\n    @Override\n    public void onError(String message) {\n      try {\n        Drawable icon = getPackageManager().getApplicationIcon(resultItem.packageName);\n        itemIcon.setImageDrawable(icon);\n      } catch (Exception e) {\n        Log.e(\"SearchActivity\", \"Error loading app icon: \" + e.getMessage());\n      }\n    }\n  });\n\n  // Note, if convenient, there is a sync method to get the icon but not recommended for UI thread\n  // Drawable icon = resultItem.loadCreativeDrawable();\n  // \u6ce8\u610f\uff0c\u5982\u679c\u65b9\u4fbf\u7684\u8bdd\uff0c\u6709\u4e00\u4e2a\u540c\u6b65\u65b9\u6cd5\u53ef\u4ee5\u83b7\u53d6\u56fe\u6807\uff0c\u4f46\u4e0d\u5efa\u8bae\u5728UI\u7ebf\u7a0b\u4e2d\u4f7f\u7528\n  // Drawable icon = resultItem.loadCreativeDrawable();\n} else {\n  // if app is installed, show the app icon\n  // \u5982\u679c\u5e94\u7528\u5df2\u5b89\u88c5\uff0c\u663e\u793a\u5e94\u7528\u56fe\u6807\n  Drawable icon = getPackageManager().getApplicationIcon(resultItem.packageName);\n  itemIcon.setImageDrawable(icon);\n}\n\nitemTitle.setText(resultItem.title);\n\nif (resultItem.description == null || resultItem.description.isEmpty()) {\n  itemDescription.setVisibility(View.GONE);\n} else {\n  itemDescription.setText(resultItem.description);\n}\n</code></pre>"},{"location":"vivo-global-search/#6-fire-impressions-for-the-ads-with-the-new-placement-tag","title":"6. Fire impressions for the ads with the new placement tag","text":"<p>6 \u4f7f\u7528\u65b0\u7684\u4f4d\u7f6e\u6807\u7b7e\u4e3a\u5e7f\u544a\u89e6\u53d1\u5c55\u793a</p> <p>It is important that you fire impressions for the ads when they are shown to the user. This is how DNA tracks the performance of the ads, but also manages frequency caps, targeting and many other functions.</p> <p>\u5f53\u5411\u7528\u6237\u663e\u793a\u5e7f\u544a\u65f6\uff0c\u91cd\u8981\u7684\u662f\u89e6\u53d1\u5c55\u793a\u3002\u8fd9\u662f DNA \u8ddf\u8e2a\u5e7f\u544a\u6027\u80fd\u7684\u65b9\u5f0f\uff0c\u4f46\u4e5f\u7ba1\u7406\u9891\u7387\u4e0a\u9650\u3001\u5b9a\u4f4d\u548c\u8bb8\u591a\u5176\u4ed6\u529f\u80fd\u3002</p> <pre><code>DeviceNativeAds dna = DeviceNativeAds.getInstance(getApplicationContext());\ndna.fireImpressions(scenario1Ads, \"gs, scenario 1, slot 3 and 8, CPC\");\ndna.fireImpressions(scenario2Ads, \"gs, scenario 2, slot 4 and 9, CPC+CPA\");\ndna.fireImpressions(scenario3Ads, \"gs, scenario 3, slot 5 and 10, CPA\");\n</code></pre>"},{"location":"vivo-global-search/#7-send-user-click-to-dna-for-routing","title":"7. Send user click to DNA for routing","text":"<p>7 \u5c06\u7528\u6237\u70b9\u51fb\u53d1\u9001\u7ed9DNA\u8fdb\u884c\u8def\u7531</p> <p>After the user clicks on a DNA result, vivo will send the click to DNA for routing. DNA should handle the click routing because it is important to deep link the user to the advertiser's app with the appropriate parameters. If you want to override the app store URL, you can do so by passing in the overrideAppStoreUrl parameter.</p> <p>\u7528\u6237\u70b9\u51fb DNA \u7ed3\u679c\u540e\uff0cvivo \u5c06\u70b9\u51fb\u53d1\u9001\u7ed9 DNA \u8fdb\u884c\u8def\u7531\u3002DNA \u5e94\u8be5\u5904\u7406\u70b9\u51fb\u8def\u7531\uff0c\u56e0\u4e3a\u91cd\u8981\u7684\u662f\u4f7f\u7528\u9002\u5f53\u7684\u53c2\u6570\u5c06\u7528\u6237\u6df1\u5ea6\u94fe\u63a5\u5230\u5e7f\u544a\u4e3b\u7684\u5e94\u7528\u3002\u5982\u679c\u60a8\u60f3\u8986\u76d6\u5e94\u7528\u5546\u5e97 URL\uff0c\u53ef\u4ee5\u901a\u8fc7\u4f20\u9012 overrideAppStoreUrl \u53c2\u6570\u6765\u5b9e\u73b0\u3002</p> <pre><code>String overrideAppStoreUrl = \"vivoMarket://mobile/detail?package_name=com.whatsapp&amp;direct_download=false&amp;data_report={\"search_type\":\"7\",\"showpos\":\"0\",\"scene\":\"2\"}&amp;time=1733831680973&amp;from_info={position=1, scene=2}\";\n\nDeviceNativeAds dna = DeviceNativeAds.getInstance(getApplicationContext());\nDeviceNativeAds.getInstance(this).fireClickAndRoute(resultItem, overrideAppStoreUrl, new DeviceNativeClickHandler() {\n  @Override\n  public void onClickServerCompleted() {\n    Log.i(\"GlobalSearchActivity\", \"Click tracking completed successfully.\");\n  }\n\n  @Override\n  public void onClickRouterCompleted(boolean didRoute) {\n    if (!didRoute) {\n      Log.e(\"GlobalSearchActivity\", \"Error routing click: No activity found to handle the click.\");\n    } else {\n      Log.i(\"GlobalSearchActivity\", \"Click routed successfully.\");\n    }\n  }\n\n  @Override\n  public void onFailure(int errorCode, String errorMessage) {\n    Log.e(\"GlobalSearchActivity\", \"Error clicking ad: \" + errorMessage);\n  }\n});\n</code></pre>"},{"location":"vivo-global-search/#important-click-handling-notes","title":"Important click handling notes","text":"<p>\u91cd\u8981\u7684\u70b9\u51fb\u5904\u7406\u6ce8\u610f\u4e8b\u9879</p> <ol> <li>We recommend that you add some sort of \"loading\" UI after the user clicks a result. In some cases, there are delays in the click tracking and routing due to network latency.<ul> <li>\u6211\u4eec\u5efa\u8bae\u5728\u7528\u6237\u70b9\u51fb\u7ed3\u679c\u540e\u6dfb\u52a0\u67d0\u79cd\u201c\u52a0\u8f7d\u201dUI\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u7531\u4e8e\u7f51\u7edc\u5ef6\u8fdf\uff0c\u70b9\u51fb\u8ddf\u8e2a\u548c\u8def\u7531\u4f1a\u51fa\u73b0\u5ef6\u8fdf\u3002</li> </ul> </li> <li>Make sure to handle the failure cases, such as no activity found to handle the click, and errors in the click tracking and routing. This should be very rare, but it's important to handle it gracefully.<ul> <li>\u786e\u4fdd\u5904\u7406\u6545\u969c\u60c5\u51b5\uff0c\u4f8b\u5982\u6ca1\u6709\u6d3b\u52a8\u53ef\u4ee5\u5904\u7406\u70b9\u51fb\uff0c\u4ee5\u53ca\u70b9\u51fb\u8ddf\u8e2a\u548c\u8def\u7531\u4e2d\u7684\u9519\u8bef\u3002\u8fd9\u79cd\u60c5\u51b5\u5e94\u8be5\u5f88\u5c11\u89c1\uff0c\u4f46\u91cd\u8981\u7684\u662f\u8981\u4f18\u96c5\u5730\u5904\u7406\u5b83\u3002</li> </ul> </li> </ol>"},{"location":"vivo-global-search/#8-do-not-cache-the-results","title":"8. Do not cache the results","text":"<p>8 \u4e0d\u8981\u7f13\u5b58\u7ed3\u679c</p> <p>Fresh ad retrieval is very low latency and not resource intensive, so there is no need to cache the results. Results can be become stale very quickly, and it's important that the user sees the most relevant results for optimum CPM.</p> <p>\u65b0\u9c9c\u7684\u5e7f\u544a\u68c0\u7d22\u5ef6\u8fdf\u975e\u5e38\u4f4e\uff0c\u4e0d\u5360\u7528\u8d44\u6e90\uff0c\u56e0\u6b64\u65e0\u9700\u7f13\u5b58\u7ed3\u679c\u3002\u7ed3\u679c\u53ef\u80fd\u4f1a\u5f88\u5feb\u53d8\u5f97\u8fc7\u65f6\uff0c\u7528\u6237\u770b\u5230\u6700\u76f8\u5173\u7684\u7ed3\u679c\u5bf9\u4e8e\u6700\u4f73 CPM \u81f3\u5173\u91cd\u8981\u3002</p>"},{"location":"vivo-global-search/#gs-search-integration","title":"GS Search Integration","text":"<p>GS \u641c\u7d22\u96c6\u6210</p>"},{"location":"vivo-global-search/#introduction_1","title":"Introduction","text":"<p>\u4ecb\u7ecd</p> <p>This section of the documentation will describe the technical integration for the following integration scenarios:</p> <p>\u672c\u6587\u6863\u90e8\u5206\u5c06\u63cf\u8ff0\u4ee5\u4e0b\u96c6\u6210\u573a\u666f\u7684\u6280\u672f\u96c6\u6210\uff1a</p> <ol> <li>Scenario 5: Search/Local Apps Result, CPC (default 3 results)<ul> <li>\u573a\u666f5\uff1a\u641c\u7d22/\u672c\u5730\u5e94\u7528\u7ed3\u679c\uff0cCPC\uff08\u9ed8\u8ba43\u4e2a\u7ed3\u679c\uff09</li> </ul> </li> <li>Scenario 6: Search/App Store Result: CPA (max 4 results)<ul> <li>\u573a\u666f6\uff1a\u641c\u7d22/\u5e94\u7528\u5546\u5e97\u7ed3\u679c\uff1aCPA\uff08\u6700\u591a4\u4e2a\u7ed3\u679c\uff09</li> </ul> </li> </ol> <p>It is important to understand that DNA returns ALL search results (re-engagement and install) in a single SDK function call. Vivo will make this function call, and then parse out the results to display in the different scenarios. DNA can assist in writing this logic for vivo.</p> <p>\u91cd\u8981\u7684\u662f\u8981\u7406\u89e3\uff0cDNA\u5728\u5355\u4e2aSDK\u51fd\u6570\u8c03\u7528\u4e2d\u8fd4\u56de\u6240\u6709\u641c\u7d22\u7ed3\u679c\uff08\u91cd\u65b0\u53c2\u4e0e\u548c\u5b89\u88c5\uff09\u3002vivo\u5c06\u8fdb\u884c\u6b64\u51fd\u6570\u8c03\u7528\uff0c\u7136\u540e\u89e3\u6790\u7ed3\u679c\u4ee5\u5728\u4e0d\u540c\u573a\u666f\u4e2d\u663e\u793a\u3002DNA\u53ef\u4ee5\u534f\u52a9vivo\u7f16\u5199\u6b64\u903b\u8f91\u3002</p>"},{"location":"vivo-global-search/#1-user-enters-character-in-search-bar","title":"1. User enters character in search bar","text":"<p>1 \u7528\u6237\u5728\u641c\u7d22\u680f\u4e2d\u8f93\u5165\u5b57\u7b26</p> <p>Adding this step to indicate that the user has entered a character in the search bar, which is the trigger for the following logic.</p> <p>\u6dfb\u52a0\u6b64\u6b65\u9aa4\u4ee5\u8868\u660e\u7528\u6237\u5df2\u5728\u641c\u7d22\u680f\u4e2d\u8f93\u5165\u5b57\u7b26\uff0c\u8fd9\u662f\u4ee5\u4e0b\u903b\u8f91\u7684\u89e6\u53d1\u5668\u3002</p>"},{"location":"vivo-global-search/#2-call-the-dna-sdk-to-get-all-search-results","title":"2. Call the DNA SDK to get ALL search results","text":"<p>2 \u8c03\u7528DNA SDK\u83b7\u53d6\u6240\u6709\u641c\u7d22\u7ed3\u679c</p> <p>This method call will return a list of DNAResultItem objects which will be used for Scenario 5 and 6.</p> <p>\u6b64\u65b9\u6cd5\u8c03\u7528\u5c06\u8fd4\u56de\u4e00\u7ec4 DNAResultItem \u5bf9\u8c61\uff0c\u7528\u4e8e\u573a\u666f5\u548c6\u3002</p> <pre><code>DeviceNativeAds dna = DeviceNativeAds.getInstance(getApplicationContext());\nList&lt;DNAResultItem&gt; adUnits = dna.getOrganicResultsForSearchForCache(query, \"gs, search ads\");\n</code></pre>"},{"location":"vivo-global-search/#3-split-out-the-dna-results-for-the-2-scenarios","title":"3. Split out the DNA results for the 2 scenarios","text":"<p>3 \u4e3a2\u79cd\u573a\u666f\u62c6\u5206DNA\u7ed3\u679c</p> <p>As mentioned above, all of the results for the 2 scenarios are in the list of DNAResultItem objects returned from step 2. You will need to parse out the results for each scenario.</p> <p>\u5982\u4e0a\u6240\u8ff0\uff0c\u6240\u6709 2 \u79cd\u573a\u666f\u7684\u7ed3\u679c\u90fd\u5728\u4ece\u7b2c 2 \u6b65\u8fd4\u56de\u7684 DNAResultItem \u5bf9\u8c61\u5217\u8868\u4e2d\u3002\u60a8\u9700\u8981\u89e3\u6790\u6bcf\u4e2a\u573a\u666f\u7684\u7ed3\u679c\u3002</p> <pre><code>ArrayList&lt;DNAResultItem&gt; scenario5Results = new ArrayList&lt;&gt;(); // Scenario 5: Search/Local Apps Result, CPC (default 3 results)\nArrayList&lt;DNAResultItem&gt; scenario6Ads = new ArrayList&lt;&gt;(); // Scenario 6: Search/App Store Result: CPA (max 4 results)\n\nfor (DNAResultItem resultItem : adUnits) {\n  if (resultItem.isInstalled) {\n    // Candidate for Scenario 5 (local app results)\n    // \u5019\u9009\u573a\u666f5\uff08\u672c\u5730\u5e94\u7528\u7ed3\u679c\uff09\n    scenario5Results.add(resultItem);\n  } else {\n    // Candidate for Scenario 6 (uninstalled apps)\n    // \u5019\u9009\u573a\u666f6\uff08\u672a\u5b89\u88c5\u7684\u5e94\u7528\uff09\n    scenario6Results.add(resultItem);\n  }\n}\n</code></pre>"},{"location":"vivo-global-search/#4-show-all-scenario-5-results-from-dna","title":"4. Show all scenario 5 results from DNA","text":"<p>4 \u663e\u793aDNA\u7684\u6240\u6709\u573a\u666f5\u7ed3\u679c</p> <p>The local app results from DNA are both Organic and Ads, ranked by relevance and monetization potential. You will replace all the original vivo local app results with the DNA results for Scenario 5. It is fine to just show 3 by default, and the rest when the user expands the search results.</p> <p>DNA \u7684\u672c\u5730\u5e94\u7528\u7ed3\u679c\u65e2\u662f\u6709\u673a\u7684\uff0c\u4e5f\u662f\u5e7f\u544a\u7684\uff0c\u6309\u76f8\u5173\u6027\u548c\u8d27\u5e01\u5316\u6f5c\u529b\u6392\u5e8f\u3002\u60a8\u5c06\u4f7f\u7528\u573a\u666f5\u7684DNA\u7ed3\u679c\u66ff\u6362\u6240\u6709\u539f\u59cb\u7684 vivo \u672c\u5730\u5e94\u7528\u7ed3\u679c\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u53ea\u663e\u793a 3 \u4e2a\u662f\u53ef\u4ee5\u7684\uff0c\u5f53\u7528\u6237\u5c55\u5f00\u641c\u7d22\u7ed3\u679c\u65f6\u663e\u793a\u5176\u4f59\u7ed3\u679c\u3002</p>"},{"location":"vivo-global-search/#5-register-impressions-for-all-visible-scenario-5-results","title":"5. Register impressions for all visible Scenario 5 results","text":"<p>5 \u4e3a\u6240\u6709\u53ef\u89c1\u7684\u573a\u666f5\u7ed3\u679c\u6ce8\u518c\u5c55\u793a</p> <p>It is important that you fire impressions for the ads when they are shown to the user. This is how DNA tracks the performance of the ads, but also manages frequency caps, targeting and many other functions. The example below shows how to fire impressions for the first 3 results in scenario5Results.</p> <p>\u5f53\u5411\u7528\u6237\u663e\u793a\u5e7f\u544a\u65f6\uff0c\u91cd\u8981\u7684\u662f\u89e6\u53d1\u5c55\u793a\u3002\u8fd9\u662f DNA \u8ddf\u8e2a\u5e7f\u544a\u6027\u80fd\u7684\u65b9\u5f0f\uff0c\u4f46\u4e5f\u7ba1\u7406\u9891\u7387\u4e0a\u9650\u3001\u5b9a\u4f4d\u548c\u8bb8\u591a\u5176\u4ed6\u529f\u80fd\u3002\u4e0b\u9762\u7684\u793a\u4f8b\u663e\u793a\u4e86\u5982\u4f55\u4e3a scenario5Results \u4e2d\u7684\u524d 3 \u4e2a\u7ed3\u679c\u89e6\u53d1\u5c55\u793a\u3002</p> <pre><code>DeviceNativeAds dna = DeviceNativeAds.getInstance(getApplicationContext());\n// Filter the first 3 results in scenario5Results and fire impressions\n// \u8fc7\u6ee4 scenario5Results \u4e2d\u7684\u524d 3 \u4e2a\u7ed3\u679c\u5e76\u89e6\u53d1\u5c55\u793a\nList&lt;DNAResultItem&gt; visibleScenario5Results = scenario5Results.stream()\n    .limit(3)\n    .collect(Collectors.toList());\ndna.fireImpressions(visibleScenario5Results, \"gs, scenario 5, local apps\");\n</code></pre>"},{"location":"vivo-global-search/#6-mix-scenario-6-results-with-vivo-organic-results","title":"6. Mix scenario 6 results with vivo organic results","text":"<p>6 \u5c06\u573a\u666f6\u7684\u7ed3\u679c\u4e0e vivo \u6709\u673a\u7ed3\u679c\u6df7\u5408</p> <p>DNA install ads for search are NOT a full replacement for vivo VStore search results. They are only a limited set of available ads. If you want to provide a high quality product, we recommend that you mix the DNA results with the vivo organic results for Scenario 6.</p> <p>DNA \u641c\u7d22\u7684\u5b89\u88c5\u5e7f\u544a\u4e0d\u662f vivo VStore \u641c\u7d22\u7ed3\u679c\u7684\u5b8c\u5168\u66ff\u4ee3\u54c1\u3002\u5b83\u4eec\u53ea\u662f\u4e00\u7ec4\u6709\u9650\u7684\u53ef\u7528\u5e7f\u544a\u3002\u5982\u679c\u60a8\u60f3\u63d0\u4f9b\u9ad8\u8d28\u91cf\u7684\u4ea7\u54c1\uff0c\u6211\u4eec\u5efa\u8bae\u60a8\u5c06 DNA \u7ed3\u679c\u4e0e vivo \u6709\u673a\u7ed3\u679c\u6df7\u5408\u4ee5\u7528\u4e8e\u573a\u666f6\u3002</p> <p>Here is an example of how to mix the DNA results with the vivo organic results:</p> <p>\u4ee5\u4e0b\u662f\u5982\u4f55\u5c06 DNA \u7ed3\u679c\u4e0e vivo \u6709\u673a\u7ed3\u679c\u6df7\u5408\u7684\u793a\u4f8b\uff1a</p> <pre><code>List&lt;Object&gt; finalResults = new ArrayList&lt;&gt;();\n\n// Add up to 4 DNA results\n// \u6dfb\u52a0\u6700\u591a4\u4e2aDNA\u7ed3\u679c\nint dnaResultsToAdd = Math.min(scenario6Ads.size(), 4);\nfinalResults.addAll(scenario6Ads.subList(0, dnaResultsToAdd));\n\n// Add vivo organic results, ensuring we don't add duplicates\n// \u6dfb\u52a0 vivo \u6709\u673a\u7ed3\u679c\uff0c\u786e\u4fdd\u4e0d\u6dfb\u52a0\u91cd\u590d\u9879\nfor (Object vivoResult : vivoOrganicResults) {\n  if (finalResults.size() &gt;= 4) break; // Stop if we already have 4 results \n  // \u5982\u679c\u5df2\u7ecf\u8fbe\u52304\u4e2a\u7ed3\u679c\uff0c\u5219\u505c\u6b62\n\n  // Check if this vivo result is already in finalResults (avoid duplicates)\n  // \u68c0\u67e5\u8fd9\u4e2a vivo \u7ed3\u679c\u662f\u5426\u5df2\u7ecf\u5728 finalResults \u4e2d\uff08\u907f\u514d\u91cd\u590d\uff09\n  boolean isDuplicate = finalResults.stream()\n    .anyMatch(item -&gt; getPackageName(item).equals(getPackageName(vivoResult)));\n\n  if (!isDuplicate) {\n    finalResults.add(vivoResult);\n  }\n}\n\n// If we still have fewer than 4 results, we can add more from vivo's organic results\n// \u5982\u679c\u6211\u4eec\u4ecd\u7136\u5c11\u4e8e4\u4e2a\u7ed3\u679c\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece vivo \u7684\u6709\u673a\u7ed3\u679c\u4e2d\u6dfb\u52a0\u66f4\u591a\nwhile (finalResults.size() &lt; 4 &amp;&amp; vivoOrganicResults.size() &gt; finalResults.size()) {\n  finalResults.add(vivoOrganicResults.get(finalResults.size()));\n}\n</code></pre> <p>And the helper function to get the package name from the result object:</p> <p>\u4ee5\u53ca\u4ece\u7ed3\u679c\u5bf9\u8c61\u83b7\u53d6\u5305\u540d\u7684\u8f85\u52a9\u51fd\u6570\uff1a</p> <pre><code>private String getPackageName(Object result) {\n    if (result instanceof DNAResultItem) {\n        return ((DNAResultItem) result).packageName;\n    } else if (result instanceof VivoResultItem) { // Assume VivoResultItem is vivo's result class\n        return ((VivoResultItem) result).getPackageName();\n    }\n    // Add more conditions for other result types if needed\n    // \u5982\u679c\u9700\u8981\uff0c\u8bf7\u6dfb\u52a0\u66f4\u591a\u6761\u4ef6\u4ee5\u5904\u7406\u5176\u4ed6\u7ed3\u679c\u7c7b\u578b\n    return \"\";\n}\n</code></pre>"},{"location":"vivo-global-search/#7-fire-impressions-for-all-visible-scenario-6-results","title":"7. Fire impressions for all visible Scenario 6 results","text":"<p>7 \u4e3a\u6240\u6709\u53ef\u89c1\u7684\u573a\u666f6\u7ed3\u679c\u6ce8\u518c\u5c55\u793a</p> <p>It is important that you fire impressions for the ads when they are shown to the user. This is how DNA tracks the performance of the ads, but also manages frequency caps, targeting and many other functions. The example below shows how to fire impressions for the first 4 results in scenario6Ads.</p> <p>\u5f53\u5411\u7528\u6237\u663e\u793a\u5e7f\u544a\u65f6\uff0c\u91cd\u8981\u7684\u662f\u89e6\u53d1\u5c55\u793a\u3002\u8fd9\u662f DNA \u8ddf\u8e2a\u5e7f\u544a\u6027\u80fd\u7684\u65b9\u5f0f\uff0c\u4f46\u4e5f\u7ba1\u7406\u9891\u7387\u4e0a\u9650\u3001\u5b9a\u4f4d\u548c\u8bb8\u591a\u5176\u4ed6\u529f\u80fd\u3002\u4e0b\u9762\u7684\u793a\u4f8b\u663e\u793a\u4e86\u5982\u4f55\u4e3a scenario6Ads \u4e2d\u7684\u524d 4 \u4e2a\u7ed3\u679c\u89e6\u53d1\u5c55\u793a\u3002</p> <pre><code>DeviceNativeAds dna = DeviceNativeAds.getInstance(getApplicationContext());\n// Filter the first 4 results in scenario6Ads and fire impressions\n// \u8fc7\u6ee4 scenario6Ads \u4e2d\u7684\u524d 4 \u4e2a\u7ed3\u679c\u5e76\u89e6\u53d1\u5c55\u793a\nList&lt;DNAResultItem&gt; visibleScenario6Results = scenario6Ads.stream()\n    .limit(4)\n    .collect(Collectors.toList());\ndna.fireImpressions(visibleScenario6Results, \"gs, scenario 6, app store\");\n</code></pre>"},{"location":"vivo-global-search/#8-load-ad-creative-in-the-ui-for-either-scenario","title":"8. Load ad creative in the UI for either scenario","text":"<p>8 \u5728UI\u4e2d\u52a0\u8f7d\u5e7f\u544a\u521b\u610f</p> <p>Below shows an example implementation of loading the ad creative in the UI, with DNA method calls. (This is the same as the Recommended Apps section in the Global Search app.)</p> <p>\u4ee5\u4e0b\u663e\u793a\u4e86\u5728 UI \u4e2d\u52a0\u8f7d\u5e7f\u544a\u521b\u610f\u7684\u793a\u4f8b\u5b9e\u73b0\uff0c\u4f7f\u7528 DNA \u65b9\u6cd5\u8c03\u7528\u3002\uff08\u8fd9\u4e0e Global Search \u5e94\u7528\u4e2d\u7684\u63a8\u8350\u5e94\u7528\u90e8\u5206\u76f8\u540c\u3002\uff09</p> <pre><code>ImageView itemIcon = itemView.findViewById(R.id.item_icon);\nTextView itemTitle = itemView.findViewById(R.id.item_title);\nTextView itemDescription = itemView.findViewById(R.id.item_description);\n\n// handle loading app icon async if app uninstalled\n// \u5f02\u6b65\u5904\u7406\u52a0\u8f7d\u5e94\u7528\u56fe\u6807\uff08\u5982\u679c\u5e94\u7528\u672a\u5b89\u88c5\uff09\nif (!resultItem.isInstalled) {\n  resultItem.loadCreativeDrawableAsync(this, new DNAResultItem.ImageCallback() {\n    @Override\n    public void onImageLoaded(Drawable icon) {\n      new Thread(() -&gt; {\n        runOnUiThread(() -&gt; {\n          if (icon == null) {\n            try {\n              Drawable backupIcon = getPackageManager().getApplicationIcon(resultItem.packageName);\n              itemIcon.setImageDrawable(backupIcon);\n            } catch (Exception e) {\n              Log.e(\"SearchActivity\", \"Error loading app icon: \" + e.getMessage());\n            }\n          } else {\n            itemIcon.setImageDrawable(icon);\n          }\n        });\n      }).start();\n    }\n\n    @Override\n    public void onError(String message) {\n      try {\n        Drawable icon = getPackageManager().getApplicationIcon(resultItem.packageName);\n        itemIcon.setImageDrawable(icon);\n      } catch (Exception e) {\n        Log.e(\"SearchActivity\", \"Error loading app icon: \" + e.getMessage());\n      }\n    }\n  });\n\n  // Note, if convenient, there is a sync method to get the icon but not recommended for UI thread\n  // Drawable icon = resultItem.loadCreativeDrawable();\n  // \u6ce8\u610f\uff0c\u5982\u679c\u65b9\u4fbf\u7684\u8bdd\uff0c\u6709\u4e00\u4e2a\u540c\u6b65\u65b9\u6cd5\u53ef\u4ee5\u83b7\u53d6\u56fe\u6807\uff0c\u4f46\u4e0d\u5efa\u8bae\u5728UI\u7ebf\u7a0b\u4e2d\u4f7f\u7528\n  // Drawable icon = resultItem.loadCreativeDrawable();\n} else {\n  // if app is installed, show the app icon\n  // \u5982\u679c\u5e94\u7528\u5df2\u5b89\u88c5\uff0c\u663e\u793a\u5e94\u7528\u56fe\u6807\n  Drawable icon = getPackageManager().getApplicationIcon(resultItem.packageName);\n  itemIcon.setImageDrawable(icon);\n}\n\nitemTitle.setText(resultItem.title);\n\nif (resultItem.description == null || resultItem.description.isEmpty()) {\n  itemDescription.setVisibility(View.GONE);\n} else {\n  itemDescription.setText(resultItem.description);\n}\n</code></pre>"},{"location":"vivo-global-search/#81-access-app-ratings-downloads-and-reviews","title":"8.1 Access app ratings, downloads, and reviews","text":"<p>8.1 \u8bbf\u95ee\u5e94\u7528\u8bc4\u5206\u3001\u4e0b\u8f7d\u6b21\u6570\u548c\u8bc4\u8bba</p> <p>You can access the ratings, downloads, and reviews of the advertiser's app from Google Play by using the <code>ratings</code>, <code>downloads</code>, and <code>reviews</code> fields in the <code>DNAResultItem</code> object.</p> <p>\u60a8\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 <code>DNAResultItem</code> \u5bf9\u8c61\u4e2d\u7684 <code>ratings</code>\u3001<code>downloads</code> \u548c <code>reviews</code> \u5b57\u6bb5\u6765\u8bbf\u95ee\u5e7f\u544a\u4e3b\u5e94\u7528\u5728 Google Play \u4e0a\u7684\u8bc4\u5206\u3001\u4e0b\u8f7d\u6b21\u6570\u548c\u8bc4\u8bba\u3002</p>"},{"location":"vivo-global-search/#9-send-user-click-to-dna-for-routing-for-either-scenario","title":"9. Send user click to DNA for routing for either scenario","text":"<p>9 \u5c06\u7528\u6237\u70b9\u51fb\u53d1\u9001\u7ed9DNA\u8fdb\u884c\u8def\u7531</p> <p>After the user clicks on a DNA result, vivo will send the click to DNA for routing. DNA should handle the click routing because it is important to deep link the user to the advertiser's app with the appropriate parameters. (This is the same as the Recommended Apps section in the Global Search app.) If you want to override the app store URL, you can do so by passing in the overrideAppStoreUrl parameter.</p> <p>\u7528\u6237\u70b9\u51fb DNA \u7ed3\u679c\u540e\uff0cvivo \u5c06\u70b9\u51fb\u53d1\u9001\u7ed9 DNA \u8fdb\u884c\u8def\u7531\u3002DNA \u5e94\u8be5\u5904\u7406\u70b9\u51fb\u8def\u7531\uff0c\u56e0\u4e3a\u91cd\u8981\u7684\u662f\u4f7f\u7528\u9002\u5f53\u7684\u53c2\u6570\u5c06\u7528\u6237\u6df1\u5ea6\u94fe\u63a5\u5230\u5e7f\u544a\u4e3b\u7684\u5e94\u7528\u3002\uff08\u8fd9\u4e0e Global Search \u5e94\u7528\u4e2d\u7684\u63a8\u8350\u5e94\u7528\u90e8\u5206\u76f8\u540c\u3002\uff09\u5982\u679c\u60a8\u60f3\u8986\u76d6\u5e94\u7528\u5546\u5e97 URL\uff0c\u53ef\u4ee5\u901a\u8fc7\u4f20\u9012 overrideAppStoreUrl \u53c2\u6570\u6765\u5b9e\u73b0\u3002</p> <pre><code>String overrideAppStoreUrl = \"vivoMarket://mobile/detail?package_name=com.whatsapp&amp;direct_download=false&amp;data_report={\"search_type\":\"7\",\"showpos\":\"0\",\"scene\":\"2\"}&amp;time=1733831680973&amp;from_info={position=1, scene=2}\"; \n\nDeviceNativeAds dna = DeviceNativeAds.getInstance(getApplicationContext());\nDeviceNativeAds.getInstance(this).fireClickAndRoute(resultItem, overrideAppStoreUrl, new DeviceNativeClickHandler() {\n  @Override\n  public void onClickServerCompleted() {\n    Log.i(\"GlobalSearchActivity\", \"Click tracking completed successfully.\");\n  }\n\n  @Override\n  public void onClickRouterCompleted(boolean didRoute) {\n    if (!didRoute) {\n      Log.e(\"GlobalSearchActivity\", \"Error routing click: No activity found to handle the click.\");\n    } else {\n      Log.i(\"GlobalSearchActivity\", \"Click routed successfully.\");\n    }\n  }\n\n  @Override\n  public void onFailure(int errorCode, String errorMessage) {\n    Log.e(\"GlobalSearchActivity\", \"Error clicking ad: \" + errorMessage);\n  }\n});\n</code></pre>"},{"location":"vivo-global-search/#important-click-handling-notes_1","title":"Important click handling notes","text":"<p>\u91cd\u8981\u7684\u70b9\u51fb\u5904\u7406\u6ce8\u610f\u4e8b\u9879</p> <ol> <li>We recommend that you add some sort of \"loading\" UI after the user clicks a result. In some cases, there are delays in the click tracking and routing due to network latency.<ul> <li>\u6211\u4eec\u5efa\u8bae\u60a8\u5728\u7528\u6237\u70b9\u51fb\u7ed3\u679c\u540e\u6dfb\u52a0\u67d0\u79cd\u201c\u52a0\u8f7d\u201dUI\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u7531\u4e8e\u7f51\u7edc\u5ef6\u8fdf\uff0c\u70b9\u51fb\u8ddf\u8e2a\u548c\u8def\u7531\u4f1a\u51fa\u73b0\u5ef6\u8fdf\u3002</li> </ul> </li> <li>Make sure to handle the failure cases, such as no activity found to handle the click, and errors in the click tracking and routing. This should be very rare, but it's important to handle it gracefully.<ul> <li>\u786e\u4fdd\u5904\u7406\u6545\u969c\u60c5\u51b5\uff0c\u4f8b\u5982\u6ca1\u6709\u6d3b\u52a8\u53ef\u4ee5\u5904\u7406\u70b9\u51fb\uff0c\u4ee5\u53ca\u70b9\u51fb\u8ddf\u8e2a\u548c\u8def\u7531\u4e2d\u7684\u9519\u8bef\u3002\u8fd9\u79cd\u60c5\u51b5\u5e94\u8be5\u5f88\u5c11\u89c1\uff0c\u4f46\u91cd\u8981\u7684\u662f\u8981\u4f18\u96c5\u5730\u5904\u7406\u5b83\u3002</li> </ul> </li> </ol>"},{"location":"vivo-sdk-changelog/","title":"vivo DNA SDK Changelog","text":""},{"location":"vivo-sdk-changelog/#vivo-110-released-8192024","title":"vivo-1.1.0 released 8/19/2024","text":"<ul> <li>First release of custom vivo DNA SDK</li> <li>Performance optimizations for vivo Global Search use case</li> </ul>"},{"location":"vivo-sdk-changelog/#vivo-111-released-8202024","title":"vivo-1.1.1 released 8/20/2024","text":"<ul> <li>Added ability to register impression manually for DNA search results (already existed for recommendations)</li> </ul>"},{"location":"vivo-sdk-changelog/#vivo-112-released-8222024","title":"vivo-1.1.2 released 8/22/2024","text":"<ul> <li>Remote control to disable app usage stats collection</li> <li>Improved poor connection handling in link routing use case</li> <li>Exposed app ratings, downloads, and reviews in DNAResultItem</li> </ul>"},{"location":"vivo-sdk-changelog/#vivo-113-released-8232024","title":"vivo-1.1.3 released 8/23/2024","text":"<ul> <li>Redirect prefetching for high likelihood clicks</li> <li>Cache and reused redirect outcomes for improved performance on repeat clicks</li> <li>Improved thread performance for click speedup</li> <li>Implemented deep linking for install ads that are already installed</li> </ul>"},{"location":"vivo-sdk-changelog/#vivo-114-released-8262024","title":"vivo-1.1.4 released 8/26/2024","text":"<ul> <li>Most app-install clicks will now be instantaneous</li> <li>Parallel process tracking link and Play Store redirect when possible</li> <li>Improved performance of Google Play to Custom Store remapping</li> </ul>"},{"location":"vivo-sdk-changelog/#vivo-115-released-952024","title":"vivo-1.1.5 released 9/5/2024","text":"<ul> <li>Initialization ongoing memory reduction of ~ 20MB</li> <li>Isolated Chrome User Agent fetch to process in order to constrain memory consumption</li> </ul>"},{"location":"vivo-sdk-changelog/#vivo-116-released-992024","title":"vivo-1.1.6 released 9/9/2024","text":"<ul> <li>Made DNAResultItem Parceable</li> </ul>"},{"location":"vivo-sdk-changelog/#vivo-117-released-9262024","title":"vivo-1.1.7 released 9/26/2024","text":"<ul> <li>Improved the robustness of inter-process communication for user agent</li> <li>Lower resource consumption when reading user agent</li> <li>Added code to prevent duplicate data orchestrator services from running</li> </ul>"},{"location":"vivo-sdk-changelog/#vivo-118-released-9302024","title":"vivo-1.1.8 released 9/30/2024","text":"<ul> <li>Fixed potential null pointer exception in profile change monitor</li> </ul>"},{"location":"vivo-sdk-changelog/#vivo-119-released-1082024","title":"vivo-1.1.9 released 10/8/2024","text":"<ul> <li>Added DNAResultItem.className and DNAResultItem.getComponentName to support alternative filtering/deduping</li> <li>SDK now supports work profile management</li> <li>Some performance improvements to ad serving</li> </ul>"},{"location":"vivo-sdk-changelog/#vivo-1110-released-10202024","title":"vivo-1.1.10 released 10/20/2024","text":"<ul> <li>Fixed a bug where the app name was being used instead of the title</li> <li>Implemented better launching of User Agent collection service to handle background restrictions</li> </ul>"},{"location":"vivo-sdk-changelog/#vivo-1111-released-1112024","title":"vivo-1.1.11 released 11/1/2024","text":"<ul> <li>Reduced the time taken to retrieve the Chrome User Agent in the separate process to minimize the chance of collisions.</li> </ul>"},{"location":"vivo-sdk-changelog/#vivo-1112-released-1152024","title":"vivo-1.1.12 released 11/5/2024","text":"<ul> <li>Better management of the local GAID</li> <li>Change of direct linking for app install campaigns</li> </ul>"},{"location":"vivo-sdk-changelog/#vivo-1113-released-1172024","title":"vivo-1.1.13 released 11/7/2024","text":"<ul> <li>Fixed an issue where new apps were not being assigned a user profile</li> <li>Improved the latency of link redirects in some cases</li> <li>Added support for intent-based deep linking</li> </ul>"},{"location":"vivo-sdk-changelog/#vivo-1114-released-11242024","title":"vivo-1.1.14 released 11/24/2024","text":"<ul> <li>Changed back to market:// URLs for app install campaigns</li> <li>Fixed a bug for routing duplicate clicks</li> <li>Removed logging when debug mode is off</li> <li>Fast open app store when link is cached</li> <li>Query parameters for market URL rewrites</li> </ul>"},{"location":"vivo-sdk-changelog/#vivo-1115-released-1242024","title":"vivo-1.1.15 released 12/4/2024","text":"<ul> <li>Added support for gzip for reduced bandwidth usage</li> </ul>"},{"location":"vivo-sdk-changelog/#vivo-1116-released-12102024","title":"vivo-1.1.16 released 12/10/2024","text":"<ul> <li>Added support for destination URL override</li> </ul>"},{"location":"vivo-sdk-changelog/#vivo-1117-released-12122024","title":"vivo-1.1.17 released 12/12/2024","text":"<ul> <li>More robust coverage of initialization to handle unpredicatible calls to destroy()</li> </ul>"},{"location":"vivo-sdk-changelog/#vivo-120-released-242025","title":"vivo-1.2.0 released 2/4/2025","text":"<ul> <li>Added cloned and multi-user app support</li> <li>Restructured network sync to improve performance and reduce data transfer</li> </ul>"},{"location":"vivo-sdk-changelog/#vivo-121-released-2202025","title":"vivo-1.2.1 released 2/20/2025","text":"<ul> <li>Implemented native fallback support for search and suggestions</li> </ul>"}]}